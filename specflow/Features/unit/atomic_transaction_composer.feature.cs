// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace algorand_tests.Features.Unit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AtomicTransactionComposerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "unit.atomic_transaction_composer",
                "unit"};
        
#line 1 "atomic_transaction_composer.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/unit", "Atomic Transaction Composer", null, ProgrammingLanguage.CSharp, new string[] {
                        "unit.atomic_transaction_composer",
                        "unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Atomic Transaction Composer")))
            {
                global::algorand_tests.Features.Unit.AtomicTransactionComposerFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
  #line hidden
#line 5
    testRunner.Given(@"a signing account with address ""BH55E5RMBD4GYWXGX5W5PJ5JAHPGM5OXKDQH5DC4O2MGI7NW4H6VOE4CP4"" and mnemonic ""awful drop leaf tennis indoor begin mandate discover uncle seven only coil atom any hospital uncover make any climb actor armed measure need above hundred""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void MethodCallConstructionAndSigning(string app_Id, string method_Signature, string app_Args, string goldens, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("app-id", app_Id);
            argumentsOfScenario.Add("method-signature", method_Signature);
            argumentsOfScenario.Add("app-args", app_Args);
            argumentsOfScenario.Add("goldens", goldens);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method call construction and signing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  this.FeatureBackground();
#line hidden
#line 8
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.And("suggested transaction parameters fee 1234, flat-fee \"true\", first-valid 9000, las" +
                        "t-valid 9010, genesis-hash \"Mf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464M=\", genes" +
                        "is-id \"cucumbernet\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.And(string.Format("an application id {0}", app_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
    testRunner.When("I make a transaction signer for the signing account.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
    testRunner.And(string.Format("I create the Method object from method signature \"{0}\"", method_Signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.And(string.Format("I append the encoded arguments \"{0}\" to the method arguments array.", app_Args), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.And("I add a method call with the signing account, the current application, suggested " +
                        "params, on complete \"noop\", current transaction signer, current method arguments" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And("I build the transaction group with the composer. If there is an error it is \"\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.Then("The composer should have a status of \"BUILT\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
    testRunner.And("I gather signatures with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.Then("The composer should have a status of \"SIGNED\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.And(string.Format("the base64 encoded signed transactions should equal \"{0}\"", goldens), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call construction and signing: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "add(uint64,uint64)uint64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "AAAAAAAAAAE=,AAAAAAAAAAE=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQMVxDN20jOKxnGvKJ3VGpYcMC+2aplj9ui5c6iXVemem63F62RpXj4pM2yY5BOB9/YZL2OoosRqPoynVRtm/bwKjdHhuiaRhcGFhk8QE/mvfacQIAAAAAAAAAAHECAAAAAAAAAABpGFwaWQBo2ZlZc0E0qJmds0jKKNnZW6rY3VjdW1iZXJuZXSiZ2jEIDH9Ies45BCBGT7TTN87K4Poh0BUtH2cYYK+8N+SOOuDomx2zSMyo3NuZMQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2kdHlwZaRhcHBs")]
        public virtual void MethodCallConstructionAndSigning_Variant0()
        {
#line 7
  this.MethodCallConstructionAndSigning("1", "add(uint64,uint64)uint64", "AAAAAAAAAAE=,AAAAAAAAAAE=", @"gqNzaWfEQMVxDN20jOKxnGvKJ3VGpYcMC+2aplj9ui5c6iXVemem63F62RpXj4pM2yY5BOB9/YZL2OoosRqPoynVRtm/bwKjdHhuiaRhcGFhk8QE/mvfacQIAAAAAAAAAAHECAAAAAAAAAABpGFwaWQBo2ZlZc0E0qJmds0jKKNnZW6rY3VjdW1iZXJuZXSiZ2jEIDH9Ies45BCBGT7TTN87K4Poh0BUtH2cYYK+8N+SOOuDomx2zSMyo3NuZMQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2kdHlwZaRhcHBs", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call construction and signing: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "empty()void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQDFR7lMtnCc83aW465p3xQszFqixlQsuBGpnAtKvgy5iBfkJSK3rGAErs22t1OT9ZYjNtppEbRlpzNNDCSKRmg2jdHhuiaRhcGFhkcQEqIwmpaRhcGlkAaNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallConstructionAndSigning_Variant1()
        {
#line 7
  this.MethodCallConstructionAndSigning("1", "empty()void", "", @"gqNzaWfEQDFR7lMtnCc83aW465p3xQszFqixlQsuBGpnAtKvgy5iBfkJSK3rGAErs22t1OT9ZYjNtppEbRlpzNNDCSKRmg2jdHhuiaRhcGFhkcQEqIwmpaRhcGlkAaNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call construction and signing: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "boolArgs(bool[])void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "AAqswA==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQB7BJ5U66CPqYqSqc+vzdNFyYaYg2bsOA6luFZjhmU+pPkD4B6L9blGiujvkj5WKCia7geP9XqjaqxH8eHHN/QSjdHhuiaRhcGFhksQErS5OfsQEAAqswKRhcGlkA6NmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallConstructionAndSigning_Variant2()
        {
#line 7
  this.MethodCallConstructionAndSigning("3", "boolArgs(bool[])void", "AAqswA==", @"gqNzaWfEQB7BJ5U66CPqYqSqc+vzdNFyYaYg2bsOA6luFZjhmU+pPkD4B6L9blGiujvkj5WKCia7geP9XqjaqxH8eHHN/QSjdHhuiaRhcGFhksQErS5OfsQEAAqswKRhcGlkA6NmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call construction and signing: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "fifteenArgs(string,string,string,string,string,string,string,string,string,string" +
            ",string,string,string,string,string)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "AAFh,AAFi,AAFj,AAFk,AAFl,AAFm,AAFn,AAFo,AAFp,AAFq,AAFr,AAFs,AAFt,AAFu,AAFv")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQLUSzQ0dMWAKx4/R+NhVB8PHnevmzV4nNLWhK7B45Jj4gV3c8L0nsw+xsb8Q6nHHnJJmGLGkuZPQdt3wMWMnNwOjdHhuiaRhcGFh3AAQxAQR2I2HxAMAAWHEAwABYsQDAAFjxAMAAWTEAwABZcQDAAFmxAMAAWfEAwABaMQDAAFpxAMAAWrEAwABa8QDAAFsxAMAAW3EAwABbsQDAAFvpGFwaWQUo2ZlZc0E0qJmds0jKKNnZW6rY3VjdW1iZXJuZXSiZ2jEIDH9Ies45BCBGT7TTN87K4Poh0BUtH2cYYK+8N+SOOuDomx2zSMyo3NuZMQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2kdHlwZaRhcHBs")]
        public virtual void MethodCallConstructionAndSigning_Variant3()
        {
#line 7
  this.MethodCallConstructionAndSigning("20", "fifteenArgs(string,string,string,string,string,string,string,string,string,string" +
                    ",string,string,string,string,string)void", "AAFh,AAFi,AAFj,AAFk,AAFl,AAFm,AAFn,AAFo,AAFp,AAFq,AAFr,AAFs,AAFt,AAFu,AAFv", @"gqNzaWfEQLUSzQ0dMWAKx4/R+NhVB8PHnevmzV4nNLWhK7B45Jj4gV3c8L0nsw+xsb8Q6nHHnJJmGLGkuZPQdt3wMWMnNwOjdHhuiaRhcGFh3AAQxAQR2I2HxAMAAWHEAwABYsQDAAFjxAMAAWTEAwABZcQDAAFmxAMAAWfEAwABaMQDAAFpxAMAAWrEAwABa8QDAAFsxAMAAW3EAwABbsQDAAFvpGFwaWQUo2ZlZc0E0qJmds0jKKNnZW6rY3VjdW1iZXJuZXSiZ2jEIDH9Ies45BCBGT7TTN87K4Poh0BUtH2cYYK+8N+SOOuDomx2zSMyo3NuZMQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2kdHlwZaRhcHBs", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call construction and signing: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "sixteenArgs(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uin" +
            "t8,uint8,uint8,uint8,uint8)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "AA==,AQ==,Ag==,Aw==,BA==,BQ==,Bg==,Bw==,CA==,CQ==,Cg==,Cw==,DA==,DQ==,Dg==,Dw==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQMpLr6nbJj+m2Wvvq90UXdYxn1i7CDwCVIr43YT/xxUy8H5MHStSnwIfQRAgwG91gsxN1mugk/aRNhm2nYZEvA+jdHhuiaRhcGFh3AAQxATidT9cxAEAxAEBxAECxAEDxAEExAEFxAEGxAEHxAEIxAEJxAEKxAELxAEMxAENxAIOD6RhcGlkFKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallConstructionAndSigning_Variant4()
        {
#line 7
  this.MethodCallConstructionAndSigning("20", "sixteenArgs(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uin" +
                    "t8,uint8,uint8,uint8,uint8)void", "AA==,AQ==,Ag==,Aw==,BA==,BQ==,Bg==,Bw==,CA==,CQ==,Cg==,Cw==,DA==,DQ==,Dg==,Dw==", @"gqNzaWfEQMpLr6nbJj+m2Wvvq90UXdYxn1i7CDwCVIr43YT/xxUy8H5MHStSnwIfQRAgwG91gsxN1mugk/aRNhm2nYZEvA+jdHhuiaRhcGFh3AAQxATidT9cxAEAxAEBxAECxAEDxAEExAEFxAEGxAEHxAEIxAEJxAEKxAELxAEMxAENxAIOD6RhcGlkFKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call construction and signing: Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "accountArgs(account,account,account,address,account)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "WygnxOc7ALlIIsdm4zPiq5ZiQM+FRZDXg8QOrncK260=,CfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaY" +
            "ZH224f0=,WygnxOc7ALlIIsdm4zPiq5ZiQM+FRZDXg8QOrncK260=,CfvSdiwI+Gxa5r9t16epAd5mdd" +
            "dQ4H6MXHaYZH224f0=,fGi1Nk3Vn4xImkRXiz0TDlLgF2a7toSZQ92/BFskmos=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQAU/SKxm16OtBEJ3THxmGl0479yDsG7XyQbknuY7BxfjnJtuBxQnbm5JW/uX+5jXUADi+JCwjA3EhHwu65MZMACjdHhuiqRhcGFhlsQEjNMCh8QBAcQBAMQBAcQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f3EAQKkYXBhdJLEIFsoJ8TnOwC5SCLHZuMz4quWYkDPhUWQ14PEDq53CtutxCB8aLU2TdWfjEiaRFeLPRMOUuAXZru2hJlD3b8EWySai6RhcGlkFKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallConstructionAndSigning_Variant5()
        {
#line 7
  this.MethodCallConstructionAndSigning("20", "accountArgs(account,account,account,address,account)void", "WygnxOc7ALlIIsdm4zPiq5ZiQM+FRZDXg8QOrncK260=,CfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaY" +
                    "ZH224f0=,WygnxOc7ALlIIsdm4zPiq5ZiQM+FRZDXg8QOrncK260=,CfvSdiwI+Gxa5r9t16epAd5mdd" +
                    "dQ4H6MXHaYZH224f0=,fGi1Nk3Vn4xImkRXiz0TDlLgF2a7toSZQ92/BFskmos=", @"gqNzaWfEQAU/SKxm16OtBEJ3THxmGl0479yDsG7XyQbknuY7BxfjnJtuBxQnbm5JW/uX+5jXUADi+JCwjA3EhHwu65MZMACjdHhuiqRhcGFhlsQEjNMCh8QBAcQBAMQBAcQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f3EAQKkYXBhdJLEIFsoJ8TnOwC5SCLHZuMz4quWYkDPhUWQ14PEDq53CtutxCB8aLU2TdWfjEiaRFeLPRMOUuAXZru2hJlD3b8EWySai6RhcGlkFKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call construction and signing: Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "appArgs(application,application,uint64,application,application)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "AB////////8=,AAAAAAAAArw=,AAAAAAAAABQ=,AAAAAAAAABQ=,AAAAAAAAArw=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQC/v+Hm+QoC6z6jKsFxTXCGRGmvmzmnX64ENDVXXDXxZpRVs+7svbh1ReOveuD3z/KYNO2mAC+Y99NtQt/FtJwyjdHhuiqRhcGFhlsQETRzPlMQBAcQBAsQIAAAAAAAAABTEAQDEAQKkYXBmYZLPAB/////////NArykYXBpZBSjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OibHbNIzKjc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlpGFwcGw=")]
        public virtual void MethodCallConstructionAndSigning_Variant6()
        {
#line 7
  this.MethodCallConstructionAndSigning("20", "appArgs(application,application,uint64,application,application)void", "AB////////8=,AAAAAAAAArw=,AAAAAAAAABQ=,AAAAAAAAABQ=,AAAAAAAAArw=", @"gqNzaWfEQC/v+Hm+QoC6z6jKsFxTXCGRGmvmzmnX64ENDVXXDXxZpRVs+7svbh1ReOveuD3z/KYNO2mAC+Y99NtQt/FtJwyjdHhuiqRhcGFhlsQETRzPlMQBAcQBAsQIAAAAAAAAABTEAQDEAQKkYXBmYZLPAB/////////NArykYXBpZBSjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OibHbNIzKjc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlpGFwcGw=", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call construction and signing: Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "assetArgs(asset,uint64,asset,asset,asset,asset)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "AAAAAAAAAAc=,AAAAAAAAAAg=,AAAAAAAAAAg=,AAAAAAAAAAk=,AAAAAAAAAAk=,AB////////8=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQF7tHkJa/ZtxEoQVTRmZzHBWXtX0RlebnUkbABSuNv259w93HLu9Gl6QayW7LIUcbOfD/Bd0VvtNBuN5RQ/p2QijdHhuiqRhcGFhl8QEuMy5O8QBAMQIAAAAAAAAAAjEAQHEAQLEAQLEAQOkYXBhc5QHCAnPAB////////+kYXBpZBSjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OibHbNIzKjc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlpGFwcGw=")]
        public virtual void MethodCallConstructionAndSigning_Variant7()
        {
#line 7
  this.MethodCallConstructionAndSigning("20", "assetArgs(asset,uint64,asset,asset,asset,asset)void", "AAAAAAAAAAc=,AAAAAAAAAAg=,AAAAAAAAAAg=,AAAAAAAAAAk=,AAAAAAAAAAk=,AB////////8=", @"gqNzaWfEQF7tHkJa/ZtxEoQVTRmZzHBWXtX0RlebnUkbABSuNv259w93HLu9Gl6QayW7LIUcbOfD/Bd0VvtNBuN5RQ/p2QijdHhuiqRhcGFhl8QEuMy5O8QBAMQIAAAAAAAAAAjEAQHEAQLEAQLEAQOkYXBhc5QHCAnPAB////////+kYXBpZBSjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OibHbNIzKjc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlpGFwcGw=", ((string[])(null)));
#line hidden
        }
        
        public virtual void MethodCallCreationConstructionAndSigning(string on_Complete, string goldens, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("on-complete", on_Complete);
            argumentsOfScenario.Add("goldens", goldens);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method call creation construction and signing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  this.FeatureBackground();
#line hidden
#line 40
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
    testRunner.And("suggested transaction parameters fee 1234, flat-fee \"true\", first-valid 9000, las" +
                        "t-valid 9010, genesis-hash \"Mf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464M=\", genes" +
                        "is-id \"cucumbernet\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
    testRunner.And("an application id 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
    testRunner.When("I make a transaction signer for the signing account.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.And("I create the Method object from method signature \"create(uint64)uint64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("I append the encoded arguments \"AAAAAAAAAAQ=\" to the method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.And(string.Format(@"I add a method call with the signing account, the current application, suggested params, on complete ""{0}"", current transaction signer, current method arguments, approval-program ""programs/zero.teal.tok"", clear-program ""programs/one.teal.tok"", global-bytes 2, global-ints 3, local-bytes 4, local-ints 5, extra-pages 1.", on_Complete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.And("I build the transaction group with the composer. If there is an error it is \"\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
    testRunner.Then("The composer should have a status of \"BUILT\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    testRunner.And("I gather signatures with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.Then("The composer should have a status of \"SIGNED\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
    testRunner.And(string.Format("the base64 encoded signed transactions should equal \"{0}\"", goldens), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call creation construction and signing: noop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "noop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:on-complete", "noop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQEdsO0c7dmuFLDqdc1cGteNnAWh0gFhXXTtBTRYWClahGJ8v1zxJGJ9blWNfFIP8JCRiPnBHocBSIecVKTx4bQ6jdHhujaRhcGFhksQEQ0ZBAcQIAAAAAAAAAASkYXBhcMQFAiABACKkYXBlcAGkYXBnc4KjbmJzAqNudWkDpGFwbHOCo25icwSjbnVpBaRhcHN1xAUCIAEBIqNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallCreationConstructionAndSigning_Noop()
        {
#line 39
  this.MethodCallCreationConstructionAndSigning("noop", @"gqNzaWfEQEdsO0c7dmuFLDqdc1cGteNnAWh0gFhXXTtBTRYWClahGJ8v1zxJGJ9blWNfFIP8JCRiPnBHocBSIecVKTx4bQ6jdHhujaRhcGFhksQEQ0ZBAcQIAAAAAAAAAASkYXBhcMQFAiABACKkYXBlcAGkYXBnc4KjbmJzAqNudWkDpGFwbHOCo25icwSjbnVpBaRhcHN1xAUCIAEBIqNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call creation construction and signing: optin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "optin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:on-complete", "optin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQBRX+Mk8mUzTD+g6lIdA9F+9vxEbV7NmENNxIstwuHgnBXhG3bM2w/fdKSKvy5RrCwMZVq8L2NQxMTvAU1qS2gejdHhujqRhcGFhksQEQ0ZBAcQIAAAAAAAAAASkYXBhbgGkYXBhcMQFAiABACKkYXBlcAGkYXBnc4KjbmJzAqNudWkDpGFwbHOCo25icwSjbnVpBaRhcHN1xAUCIAEBIqNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallCreationConstructionAndSigning_Optin()
        {
#line 39
  this.MethodCallCreationConstructionAndSigning("optin", @"gqNzaWfEQBRX+Mk8mUzTD+g6lIdA9F+9vxEbV7NmENNxIstwuHgnBXhG3bM2w/fdKSKvy5RrCwMZVq8L2NQxMTvAU1qS2gejdHhujqRhcGFhksQEQ0ZBAcQIAAAAAAAAAASkYXBhbgGkYXBhcMQFAiABACKkYXBlcAGkYXBnc4KjbmJzAqNudWkDpGFwbHOCo25icwSjbnVpBaRhcHN1xAUCIAEBIqNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call creation construction and signing: delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:on-complete", "delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQLxlqhy12zkcCO1PBragfYqPx5aD90HKM/9vKx3uA4sgD9Rl7nVoeNAWA0axWwqkMJPyIzr3m2++KB2ujuiqdwWjdHhujqRhcGFhksQEQ0ZBAcQIAAAAAAAAAASkYXBhbgWkYXBhcMQFAiABACKkYXBlcAGkYXBnc4KjbmJzAqNudWkDpGFwbHOCo25icwSjbnVpBaRhcHN1xAUCIAEBIqNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallCreationConstructionAndSigning_Delete()
        {
#line 39
  this.MethodCallCreationConstructionAndSigning("delete", @"gqNzaWfEQLxlqhy12zkcCO1PBragfYqPx5aD90HKM/9vKx3uA4sgD9Rl7nVoeNAWA0axWwqkMJPyIzr3m2++KB2ujuiqdwWjdHhujqRhcGFhksQEQ0ZBAcQIAAAAAAAAAASkYXBhbgWkYXBhcMQFAiABACKkYXBlcAGkYXBnc4KjbmJzAqNudWkDpGFwbHOCo25icwSjbnVpBaRhcHN1xAUCIAEBIqNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call creation construction and signing: update")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "update")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:on-complete", "update")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQE5k1S2terPuVH+dyngc5UhfmqM8weLwgR9Tsn7r2DFhY5PrZSyOxdTp6g/wu5Qz0/5jV2b+R5mqBiXwaZ+TUgCjdHhujqRhcGFhksQEQ0ZBAcQIAAAAAAAAAASkYXBhbgSkYXBhcMQFAiABACKkYXBlcAGkYXBnc4KjbmJzAqNudWkDpGFwbHOCo25icwSjbnVpBaRhcHN1xAUCIAEBIqNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallCreationConstructionAndSigning_Update()
        {
#line 39
  this.MethodCallCreationConstructionAndSigning("update", @"gqNzaWfEQE5k1S2terPuVH+dyngc5UhfmqM8weLwgR9Tsn7r2DFhY5PrZSyOxdTp6g/wu5Qz0/5jV2b+R5mqBiXwaZ+TUgCjdHhujqRhcGFhksQEQ0ZBAcQIAAAAAAAAAASkYXBhbgSkYXBhcMQFAiABACKkYXBlcAGkYXBnc4KjbmJzAqNudWkDpGFwbHOCo25icwSjbnVpBaRhcHN1xAUCIAEBIqNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        public virtual void MethodCallWithPayTxnConstructionAndSigning(string app_Id, string method_Signature, string app_Args, string goldens, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("app-id", app_Id);
            argumentsOfScenario.Add("method-signature", method_Signature);
            argumentsOfScenario.Add("app-args", app_Args);
            argumentsOfScenario.Add("goldens", goldens);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method call with pay txn construction and signing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  this.FeatureBackground();
#line hidden
#line 62
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
    testRunner.And("suggested transaction parameters fee 1234, flat-fee \"true\", first-valid 9000, las" +
                        "t-valid 9010, genesis-hash \"Mf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464M=\", genes" +
                        "is-id \"cucumbernet\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
    testRunner.And(string.Format("an application id {0}", app_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
    testRunner.When("I make a transaction signer for the signing account.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
    testRunner.And("I build a payment transaction with sender \"BH55E5RMBD4GYWXGX5W5PJ5JAHPGM5OXKDQH5D" +
                        "C4O2MGI7NW4H6VOE4CP4\", receiver \"BH55E5RMBD4GYWXGX5W5PJ5JAHPGM5OXKDQH5DC4O2MGI7N" +
                        "W4H6VOE4CP4\", amount 100001, close remainder to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
    testRunner.And("I create a transaction with signer with the current transaction.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.And(string.Format("I create the Method object from method signature \"{0}\"", method_Signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("I append the current transaction with signer to the method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
    testRunner.And(string.Format("I append the encoded arguments \"{0}\" to the method arguments array.", app_Args), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
    testRunner.And("I add a method call with the signing account, the current application, suggested " +
                        "params, on complete \"noop\", current transaction signer, current method arguments" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
    testRunner.And("I build the transaction group with the composer. If there is an error it is \"\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
    testRunner.Then("The composer should have a status of \"BUILT\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
    testRunner.And("I gather signatures with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
    testRunner.Then("The composer should have a status of \"SIGNED\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    testRunner.And(string.Format("the base64 encoded signed transactions should equal \"{0}\"", goldens), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call with pay txn construction and signing: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "payment(pay,address)bool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "CfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f0=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQCv0jOhwTJjQfJ9KXm6SJdeGAFea7brEq0BbwBDVMA577Rx3rooi9Ck/ZnExT66+a/kJpUGoPcjdrZoR7QLHHQSjdHhuiqNhbXTOAAGGoaNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIN9TXFmEUnoCj+aTGTY6FrNbiCumYIoSgBhMZBZ1/HwOomx2zSMyo3JjdsQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2jc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlo3BheQ==,gqNzaWfEQDujKdRruRn6Xg46ZPBIfnL6eooQBqwTRyt9s05bDnc9I3NNqK7SBTuzKcvMes5PTbHxUw/GaNRbQo750PTtCgGjdHhuiqRhcGFhksQEU1pHusQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2kYXBpZAGjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCDfU1xZhFJ6Ao/mkxk2OhazW4grpmCKEoAYTGQWdfx8DqJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallWithPayTxnConstructionAndSigning_Variant0()
        {
#line 61
  this.MethodCallWithPayTxnConstructionAndSigning("1", "payment(pay,address)bool", "CfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f0=", @"gqNzaWfEQCv0jOhwTJjQfJ9KXm6SJdeGAFea7brEq0BbwBDVMA577Rx3rooi9Ck/ZnExT66+a/kJpUGoPcjdrZoR7QLHHQSjdHhuiqNhbXTOAAGGoaNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIN9TXFmEUnoCj+aTGTY6FrNbiCumYIoSgBhMZBZ1/HwOomx2zSMyo3JjdsQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2jc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlo3BheQ==,gqNzaWfEQDujKdRruRn6Xg46ZPBIfnL6eooQBqwTRyt9s05bDnc9I3NNqK7SBTuzKcvMes5PTbHxUw/GaNRbQo750PTtCgGjdHhuiqRhcGFhksQEU1pHusQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2kYXBpZAGjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCDfU1xZhFJ6Ao/mkxk2OhazW4grpmCKEoAYTGQWdfx8DqJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call with pay txn construction and signing: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "generic(txn,address)bool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args", "CfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f0=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"gqNzaWfEQFBnvjwMoQIWkk2JR+C7k7ou4sE7zlq++gOuAkS/FgMorWgaeBAZNVqIAiTITgp7j7SapfH2xn69HIkOWcoH2ASjdHhuiqNhbXTOAAGGoaNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIJCQOjaegEcO1s8vPYqjhmiznNDzK2bTS69N0szpuG3pomx2zSMyo3JjdsQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2jc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlo3BheQ==,gqNzaWfEQKDNV+SD1s4XFzAhjHuWz8az7kolH7JQJG7BfrzMVAeD9DXmAPcA+M9yJdx/ZKoBVlEv4N5O+BM5tk0WzjW+/Q+jdHhuiqRhcGFhksQEWsMy4cQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2kYXBpZAGjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCCQkDo2noBHDtbPLz2Ko4Zos5zQ8ytm00uvTdLM6bht6aJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallWithPayTxnConstructionAndSigning_Variant1()
        {
#line 61
  this.MethodCallWithPayTxnConstructionAndSigning("1", "generic(txn,address)bool", "CfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f0=", @"gqNzaWfEQFBnvjwMoQIWkk2JR+C7k7ou4sE7zlq++gOuAkS/FgMorWgaeBAZNVqIAiTITgp7j7SapfH2xn69HIkOWcoH2ASjdHhuiqNhbXTOAAGGoaNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIJCQOjaegEcO1s8vPYqjhmiznNDzK2bTS69N0szpuG3pomx2zSMyo3JjdsQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2jc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlo3BheQ==,gqNzaWfEQKDNV+SD1s4XFzAhjHuWz8az7kolH7JQJG7BfrzMVAeD9DXmAPcA+M9yJdx/ZKoBVlEv4N5O+BM5tk0WzjW+/Q+jdHhuiqRhcGFhksQEWsMy4cQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaYZH224f2kYXBpZAGjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCCQkDo2noBHDtbPLz2Ko4Zos5zQ8ytm00uvTdLM6bht6aJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        public virtual void MethodCallWithMultiplePayTxnsConstructionAndSigning(string app_Id, string method_Signature, string app_Args_Part_1, string app_Args_Part_2, string goldens, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("app-id", app_Id);
            argumentsOfScenario.Add("method-signature", method_Signature);
            argumentsOfScenario.Add("app-args-part-1", app_Args_Part_1);
            argumentsOfScenario.Add("app-args-part-2", app_Args_Part_2);
            argumentsOfScenario.Add("goldens", goldens);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method call with multiple pay txns construction and signing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 90
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  this.FeatureBackground();
#line hidden
#line 91
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
    testRunner.And("suggested transaction parameters fee 1234, flat-fee \"true\", first-valid 9000, las" +
                        "t-valid 9010, genesis-hash \"Mf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464M=\", genes" +
                        "is-id \"cucumbernet\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
    testRunner.And(string.Format("an application id {0}", app_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
    testRunner.When("I make a transaction signer for the signing account.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
    testRunner.And(string.Format("I create the Method object from method signature \"{0}\"", method_Signature), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
    testRunner.And(string.Format("I append the encoded arguments \"{0}\" to the method arguments array.", app_Args_Part_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
    testRunner.And("I build a payment transaction with sender \"5WSFXNXLZGIRSSY6R4UGMHJSHKKW3NDZ2WXCOX" +
                        "ZVG5HMQ4P7HN4PGLD7LY\", receiver \"EJMBXTBD4BO27OC3OFFMX4D4WF5LMZROBE6X4QSW5I7VSM7" +
                        "4KZHVUWKOAA\", amount 100000, close remainder to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
    testRunner.And("I create a transaction with signer with the current transaction.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
    testRunner.And("I append the current transaction with signer to the method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
    testRunner.And(string.Format("I append the encoded arguments \"{0}\" to the method arguments array.", app_Args_Part_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
    testRunner.And(@"I build a payment transaction with sender ""EJMBXTBD4BO27OC3OFFMX4D4WF5LMZROBE6X4QSW5I7VSM74KZHVUWKOAA"", receiver ""5WSFXNXLZGIRSSY6R4UGMHJSHKKW3NDZ2WXCOXZVG5HMQ4P7HN4PGLD7LY"", amount 200000, close remainder to ""IO4SUZWSUQZBKIC4PMJJXSZS53IBD3LED75OT5W32HSHC3JASJKQNLUQDY""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
    testRunner.And("I create a transaction with signer with the current transaction.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
    testRunner.And("I append the current transaction with signer to the method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And("I add a method call with the signing account, the current application, suggested " +
                        "params, on complete \"noop\", current transaction signer, current method arguments" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And("I build the transaction group with the composer. If there is an error it is \"\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.Then("The composer should have a status of \"BUILT\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
    testRunner.And("I gather signatures with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.Then("The composer should have a status of \"SIGNED\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
    testRunner.And(string.Format("the base64 encoded signed transactions should equal \"{0}\"", goldens), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call with multiple pay txns construction and signing: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "payment(uint64,pay,uint8,pay)bool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args-part-1", "AAAAAAAAE4g=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args-part-2", "CA==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQFgXcrfqlqPMkUpF7NNtiUraAzBu/hRY1U8qQh6MdNztPAAB50uvmTtzIedFGe3dfEgx9lgsb+xal+k0ovV4RwejdHhuiqNhbXTOAAGGoKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIPflivpHZbXTSM8skvY8aHBV1dQQ5SvbnpSCevRaHupNomx2zSMyo3JjdsQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+jc25kxCDtpFu268mRGUsejyhmHTI6lW20edWuJ181N07Icf87eKR0eXBlo3BheQ==,g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQBLdTaZDeN2HnuWAmTErSuNYllUZZ6D5xakLGv9nesuAUnX38bEqqEioOiHU3bksxzo3a+t6aIgtgMokFcJrzwOjdHhui6NhbXTOAAMNQKVjbG9zZcQgQ7kqZtKkMhUgXHsSm8sy7tAR7WQf+un229HkcW0gklWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCD35Yr6R2W100jPLJL2PGhwVdXUEOUr256Ugnr0Wh7qTaJsds0jMqNyY3bEIO2kW7bryZEZSx6PKGYdMjqVbbR51a4nXzU3Tshx/zt4o3NuZMQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+kdHlwZaNwYXk=,gqNzaWfEQBrbSBf2FI7vMCRIxMXfBC0TH2mm2f+mn6hBl25BZNxh6qlFTYb+yCJsOi4HiRl47emzjcp9vy2dwAENMoZVLwOjdHhuiqRhcGFhk8QEkASID8QIAAAAAAAAE4jEAQikYXBpZAWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCD35Yr6R2W100jPLJL2PGhwVdXUEOUr256Ugnr0Wh7qTaJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallWithMultiplePayTxnsConstructionAndSigning_Variant0()
        {
#line 90
  this.MethodCallWithMultiplePayTxnsConstructionAndSigning("5", "payment(uint64,pay,uint8,pay)bool", "AAAAAAAAE4g=", "CA==", @"g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQFgXcrfqlqPMkUpF7NNtiUraAzBu/hRY1U8qQh6MdNztPAAB50uvmTtzIedFGe3dfEgx9lgsb+xal+k0ovV4RwejdHhuiqNhbXTOAAGGoKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIPflivpHZbXTSM8skvY8aHBV1dQQ5SvbnpSCevRaHupNomx2zSMyo3JjdsQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+jc25kxCDtpFu268mRGUsejyhmHTI6lW20edWuJ181N07Icf87eKR0eXBlo3BheQ==,g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQBLdTaZDeN2HnuWAmTErSuNYllUZZ6D5xakLGv9nesuAUnX38bEqqEioOiHU3bksxzo3a+t6aIgtgMokFcJrzwOjdHhui6NhbXTOAAMNQKVjbG9zZcQgQ7kqZtKkMhUgXHsSm8sy7tAR7WQf+un229HkcW0gklWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCD35Yr6R2W100jPLJL2PGhwVdXUEOUr256Ugnr0Wh7qTaJsds0jMqNyY3bEIO2kW7bryZEZSx6PKGYdMjqVbbR51a4nXzU3Tshx/zt4o3NuZMQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+kdHlwZaNwYXk=,gqNzaWfEQBrbSBf2FI7vMCRIxMXfBC0TH2mm2f+mn6hBl25BZNxh6qlFTYb+yCJsOi4HiRl47emzjcp9vy2dwAENMoZVLwOjdHhuiqRhcGFhk8QEkASID8QIAAAAAAAAE4jEAQikYXBpZAWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCD35Yr6R2W100jPLJL2PGhwVdXUEOUr256Ugnr0Wh7qTaJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call with multiple pay txns construction and signing: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "generic(uint64,txn,uint8,txn)bool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args-part-1", "AAAAAAAAE4k=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args-part-2", "CQ==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQAEJFAwoxMwLqDE3KGrGmKRei2a9pfDgWjB2LH5vkrgIGcjPTy6r0YU36UpVHFNq5U6tuS8pNdHV448gDzDT2AGjdHhuiqNhbXTOAAGGoKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIDyrzDbT+YwsSw8y4Wss7f7dkN9Y/bnPI6FW+AIsRcpuomx2zSMyo3JjdsQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+jc25kxCDtpFu268mRGUsejyhmHTI6lW20edWuJ181N07Icf87eKR0eXBlo3BheQ==,g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQCt8u+Q+MqFH8K0fjgFzKVwGMcgqh5o1+BIA4G+GSqT9SZ1k3WxdRzwlobm75QsmJZ/aXcbbJ+B0c+jc8GqZggyjdHhui6NhbXTOAAMNQKVjbG9zZcQgQ7kqZtKkMhUgXHsSm8sy7tAR7WQf+un229HkcW0gklWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCA8q8w20/mMLEsPMuFrLO3+3ZDfWP25zyOhVvgCLEXKbqJsds0jMqNyY3bEIO2kW7bryZEZSx6PKGYdMjqVbbR51a4nXzU3Tshx/zt4o3NuZMQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+kdHlwZaNwYXk=,gqNzaWfEQPgC6qWsD+UaIZzEDbqzFX+FTghgMMT6USEkpCvvbJu8ichVHOcnz6EGQD0mRzL1KG2rbnSmq+Hu7iclOmt2vQejdHhuiqRhcGFhk8QEtOUqucQIAAAAAAAAE4nEAQmkYXBpZAWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCA8q8w20/mMLEsPMuFrLO3+3ZDfWP25zyOhVvgCLEXKbqJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallWithMultiplePayTxnsConstructionAndSigning_Variant1()
        {
#line 90
  this.MethodCallWithMultiplePayTxnsConstructionAndSigning("5", "generic(uint64,txn,uint8,txn)bool", "AAAAAAAAE4k=", "CQ==", @"g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQAEJFAwoxMwLqDE3KGrGmKRei2a9pfDgWjB2LH5vkrgIGcjPTy6r0YU36UpVHFNq5U6tuS8pNdHV448gDzDT2AGjdHhuiqNhbXTOAAGGoKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIDyrzDbT+YwsSw8y4Wss7f7dkN9Y/bnPI6FW+AIsRcpuomx2zSMyo3JjdsQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+jc25kxCDtpFu268mRGUsejyhmHTI6lW20edWuJ181N07Icf87eKR0eXBlo3BheQ==,g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQCt8u+Q+MqFH8K0fjgFzKVwGMcgqh5o1+BIA4G+GSqT9SZ1k3WxdRzwlobm75QsmJZ/aXcbbJ+B0c+jc8GqZggyjdHhui6NhbXTOAAMNQKVjbG9zZcQgQ7kqZtKkMhUgXHsSm8sy7tAR7WQf+un229HkcW0gklWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCA8q8w20/mMLEsPMuFrLO3+3ZDfWP25zyOhVvgCLEXKbqJsds0jMqNyY3bEIO2kW7bryZEZSx6PKGYdMjqVbbR51a4nXzU3Tshx/zt4o3NuZMQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+kdHlwZaNwYXk=,gqNzaWfEQPgC6qWsD+UaIZzEDbqzFX+FTghgMMT6USEkpCvvbJu8ichVHOcnz6EGQD0mRzL1KG2rbnSmq+Hu7iclOmt2vQejdHhuiqRhcGFhk8QEtOUqucQIAAAAAAAAE4nEAQmkYXBpZAWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCA8q8w20/mMLEsPMuFrLO3+3ZDfWP25zyOhVvgCLEXKbqJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Method call with multiple pay txns construction and signing: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-id", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:method-signature", "payAndGeneric(uint64,pay,uint8,txn)bool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args-part-1", "AAAAAAAAE4o=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:app-args-part-2", "Cg==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:goldens", @"g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQLy/8gtihLP8soAaW8siuOcsLFgEI8DXCrUG6SSTutOWAe6pLBZ6Pa0uLzBctr9TIh6w5MS3Ijcp75W3cFSBMgSjdHhuiqNhbXTOAAGGoKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIPOPvzxTdmRI6afu0TjG7FKBqUCwAp4KuOW/Q20O/mRfomx2zSMyo3JjdsQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+jc25kxCDtpFu268mRGUsejyhmHTI6lW20edWuJ181N07Icf87eKR0eXBlo3BheQ==,g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQNnEcRFJydgyg/8QcyNxsJ+O6yBNZf9gZxTSSXOvyDE2xxXyMUgYTHZsbbJrY2y/bFr0OjpN+RHNaAEC97zWJwOjdHhui6NhbXTOAAMNQKVjbG9zZcQgQ7kqZtKkMhUgXHsSm8sy7tAR7WQf+un229HkcW0gklWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCDzj788U3ZkSOmn7tE4xuxSgalAsAKeCrjlv0NtDv5kX6Jsds0jMqNyY3bEIO2kW7bryZEZSx6PKGYdMjqVbbR51a4nXzU3Tshx/zt4o3NuZMQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+kdHlwZaNwYXk=,gqNzaWfEQMLPXHFcI9kxHRviIqISoQ+1QtdO8BXo3MlbniTENAxd5o7rVoV3yYHwDDzu/lCf6dlDY0S9HBfRfEtegRXDPQajdHhuiqRhcGFhk8QE/QlBR8QIAAAAAAAAE4rEAQqkYXBpZAWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCDzj788U3ZkSOmn7tE4xuxSgalAsAKeCrjlv0NtDv5kX6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==")]
        public virtual void MethodCallWithMultiplePayTxnsConstructionAndSigning_Variant2()
        {
#line 90
  this.MethodCallWithMultiplePayTxnsConstructionAndSigning("5", "payAndGeneric(uint64,pay,uint8,txn)bool", "AAAAAAAAE4o=", "Cg==", @"g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQLy/8gtihLP8soAaW8siuOcsLFgEI8DXCrUG6SSTutOWAe6pLBZ6Pa0uLzBctr9TIh6w5MS3Ijcp75W3cFSBMgSjdHhuiqNhbXTOAAGGoKNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIPOPvzxTdmRI6afu0TjG7FKBqUCwAp4KuOW/Q20O/mRfomx2zSMyo3JjdsQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+jc25kxCDtpFu268mRGUsejyhmHTI6lW20edWuJ181N07Icf87eKR0eXBlo3BheQ==,g6RzZ25yxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aNzaWfEQNnEcRFJydgyg/8QcyNxsJ+O6yBNZf9gZxTSSXOvyDE2xxXyMUgYTHZsbbJrY2y/bFr0OjpN+RHNaAEC97zWJwOjdHhui6NhbXTOAAMNQKVjbG9zZcQgQ7kqZtKkMhUgXHsSm8sy7tAR7WQf+un229HkcW0gklWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCDzj788U3ZkSOmn7tE4xuxSgalAsAKeCrjlv0NtDv5kX6Jsds0jMqNyY3bEIO2kW7bryZEZSx6PKGYdMjqVbbR51a4nXzU3Tshx/zt4o3NuZMQgIlgbzCPgXa+4W3FKy/B8sXq2Zi4JPX5CVuo/WTP8Vk+kdHlwZaNwYXk=,gqNzaWfEQMLPXHFcI9kxHRviIqISoQ+1QtdO8BXo3MlbniTENAxd5o7rVoV3yYHwDDzu/lCf6dlDY0S9HBfRfEtegRXDPQajdHhuiqRhcGFhk8QE/QlBR8QIAAAAAAAAE4rEAQqkYXBpZAWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCDzj788U3ZkSOmn7tE4xuxSgalAsAKeCrjlv0NtDv5kX6Jsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9tuH9pHR5cGWkYXBwbA==", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Multiple method calls construction and signing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        public virtual void MultipleMethodCallsConstructionAndSigning()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple method calls construction and signing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 127
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  this.FeatureBackground();
#line hidden
#line 128
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
    testRunner.And("suggested transaction parameters fee 1234, flat-fee \"true\", first-valid 9000, las" +
                        "t-valid 9010, genesis-hash \"Mf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464M=\", genes" +
                        "is-id \"cucumbernet\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
    testRunner.And("an application id 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.When("I make a transaction signer for the signing account.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
    testRunner.And("I create the Method object from method signature \"optIn(string)string\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
    testRunner.And("I append the encoded arguments \"AAxBbGdvcmFuZCBGYW4=\" to the method arguments arr" +
                        "ay.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
    testRunner.And("I add a method call with the signing account, the current application, suggested " +
                        "params, on complete \"optin\", current transaction signer, current method argument" +
                        "s.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
    testRunner.And("I create the Method object from method signature \"payment(pay,uint64)bool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
    testRunner.And("I build a payment transaction with sender \"BH55E5RMBD4GYWXGX5W5PJ5JAHPGM5OXKDQH5D" +
                        "C4O2MGI7NW4H6VOE4CP4\", receiver \"BH55E5RMBD4GYWXGX5W5PJ5JAHPGM5OXKDQH5DC4O2MGI7N" +
                        "W4H6VOE4CP4\", amount 1234567, close remainder to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
    testRunner.And("I create a transaction with signer with the current transaction.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
    testRunner.And("I append the current transaction with signer to the method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
    testRunner.And("I append the encoded arguments \"AAAAAAAS1oc=\" to the method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
    testRunner.And("I add a method call with the signing account, the current application, suggested " +
                        "params, on complete \"noop\", current transaction signer, current method arguments" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
    testRunner.When("I create the Method object from method signature \"add(uint64,uint64)uint64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
    testRunner.And("I append the encoded arguments \"AAAAAAAAAAE=,AAAAAAAAAAI=\" to the method argument" +
                        "s array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
    testRunner.And("I add a method call with the signing account, the current application, suggested " +
                        "params, on complete \"noop\", current transaction signer, current method arguments" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
    testRunner.And("I create the Method object from method signature \"closeOut()string\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
    testRunner.And("I add a method call with the signing account, the current application, suggested " +
                        "params, on complete \"closeout\", current transaction signer, current method argum" +
                        "ents.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
    testRunner.And("I build the transaction group with the composer. If there is an error it is \"\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
    testRunner.Then("The composer should have a status of \"BUILT\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 161
    testRunner.And("I gather signatures with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
    testRunner.Then("The composer should have a status of \"SIGNED\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
    testRunner.And("the base64 encoded signed transactions should equal \"gqNzaWfEQKVD98rzjJ6etlT65/tJ" +
                        "wTxuL5d4ryZAi0HQvugm4BFcTFh8EJMwMu0WuK3nJCI8V12z71zu2FfHZr2gfASS1QSjdHhui6RhcGFh" +
                        "ksQEz6aONsQOAAxBbGdvcmFuZCBGYW6kYXBhbgGkYXBpZAWjZmVlzQTSomZ2zSMoo2dlbqtjdWN1bWJl" +
                        "cm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCAIaNQsXGAGnBByjyts" +
                        "a+evka/YMnDx4NvfNjbTn+11pqJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUOB+jFx2mGR9" +
                        "tuH9pHR5cGWkYXBwbA==,gqNzaWfEQPyojeHXIbbeE4+8qClaYNwsKE32C842NbrTDPZQybLilzwXlKJ" +
                        "M2dW36ZbqXJYVBykaar4qahk9Nz1fJeJeugqjdHhuiqNhbXTOABLWh6NmZWXNBNKiZnbNIyijZ2Vuq2N" +
                        "1Y3VtYmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIAho1CxcYAa" +
                        "cEHKPK2xr56+Rr9gycPHg2982NtOf7XWmomx2zSMyo3JjdsQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6" +
                        "MXHaYZH224f2jc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlo3BheQ==,gq" +
                        "NzaWfEQObtQ7AzmAv+ZNSP066lypBvHwpdub1ckAT08J5Lcfz0r+Z/aREWiOVmsf2mic9wf6c73rLHzS" +
                        "/OmbL3py9/XgSjdHhuiqRhcGFhksQEPjs9KMQIAAAAAAAS1oekYXBpZAWjZmVlzQTSomZ2zSMoo2dlbq" +
                        "tjdWN1bWJlcm5ldKJnaMQgMf0h6zjkEIEZPtNM3zsrg+iHQFS0fZxhgr7w35I464OjZ3JwxCAIaNQsXG" +
                        "AGnBByjytsa+evka/YMnDx4NvfNjbTn+11pqJsds0jMqNzbmTEIAn70nYsCPhsWua/bdenqQHeZnXXUO" +
                        "B+jFx2mGR9tuH9pHR5cGWkYXBwbA==,gqNzaWfEQBrZuzcWAiEw8icgD3J9FmU8J91UENqp2wSmA+4AA" +
                        "nIlzoiGJm/fn6HkYbdhvFlLcnIaFI4hm2IYCnmfcVVCWAejdHhuiqRhcGFhk8QE/mvfacQIAAAAAAAAA" +
                        "AHECAAAAAAAAAACpGFwaWQFo2ZlZc0E0qJmds0jKKNnZW6rY3VjdW1iZXJuZXSiZ2jEIDH9Ies45BCBG" +
                        "T7TTN87K4Poh0BUtH2cYYK+8N+SOOuDo2dycMQgCGjULFxgBpwQco8rbGvnr5Gv2DJw8eDb3zY205/td" +
                        "aaibHbNIzKjc25kxCAJ+9J2LAj4bFrmv23Xp6kB3mZ111Dgfoxcdphkfbbh/aR0eXBlpGFwcGw=,gqNz" +
                        "aWfEQBs7mtW7Xj6mY73M32nAUveeRuBX7FCAci3JYwf4iy6Mmjxkh8xScm11e+pqiojf9MeG26Zigrdq" +
                        "JH/4wP9pHA+jdHhui6RhcGFhkcQEqfQrPaRhcGFuAqRhcGlkBaNmZWXNBNKiZnbNIyijZ2Vuq2N1Y3Vt" +
                        "YmVybmV0omdoxCAx/SHrOOQQgRk+00zfOyuD6IdAVLR9nGGCvvDfkjjrg6NncnDEIAho1CxcYAacEHKP" +
                        "K2xr56+Rr9gycPHg2982NtOf7XWmomx2zSMyo3NuZMQgCfvSdiwI+Gxa5r9t16epAd5mdddQ4H6MXHaY" +
                        "ZH224f2kdHlwZaRhcHBs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Initial status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        public virtual void InitialStatus()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Initial status", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 165
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  this.FeatureBackground();
#line hidden
#line 166
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
    testRunner.Then("The composer should have a status of \"BUILDING\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Build with 0 transactions fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Atomic Transaction Composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.atomic_transaction_composer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        public virtual void BuildWith0TransactionsFails()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Build with 0 transactions fails", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 169
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  this.FeatureBackground();
#line hidden
#line 170
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 171
    testRunner.When("I build the transaction group with the composer. If there is an error it is \"zero" +
                        " group size error\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 172
    testRunner.Then("The composer should have a status of \"BUILDING\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
