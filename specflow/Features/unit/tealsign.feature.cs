// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace algorand_tests.Features.Unit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TealsignFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "unit.tealsign",
                "unit"};
        
#line 1 "tealsign.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/unit", "Tealsign", null, ProgrammingLanguage.CSharp, new string[] {
                        "unit.tealsign",
                        "unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Tealsign")))
            {
                global::algorand_tests.Features.Unit.TealsignFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void TealsignDataUsingContractAddressAndMnemonic(string data, string hash, string mn, string golden, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("data", data);
            argumentsOfScenario.Add("hash", hash);
            argumentsOfScenario.Add("mn", mn);
            argumentsOfScenario.Add("golden", golden);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tealsign data using contract address and mnemonic", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    testRunner.Given(string.Format("base64 encoded data to sign \"{0}\"", data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
    testRunner.And(string.Format("program hash \"{0}\"", hash), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
    testRunner.And(string.Format("mnemonic for private key \"{0}\"", mn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
    testRunner.When("I perform tealsign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
    testRunner.Then(string.Format("the signature should be equal to \"{0}\"", golden), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Tealsign data using contract address and mnemonic: Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tealsign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.tealsign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:data", "Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:hash", "6Z3C3LDVWGMX23BMSYMANACQOSINPFIRF77H7N3AWJZYV6OH6GWTJKVMXY")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:mn", "wish used round alert sock survey mind dilemma giraffe usage hockey thing rifle t" +
            "rim swim fault sort denial phrase century hundred shoulder chat absent nation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:golden", "lKvoxpnatNLbjJs5iGWwXK144AYlIpEVe+S7A8VcKVDMktGlhxJD2M0kz2cFTeN9xnna4DsSCPCS5hHmV" +
            "2qXDA==")]
        public virtual void TealsignDataUsingContractAddressAndMnemonic_Ux8JntyBJQarjKGF8A()
        {
#line 4
  this.TealsignDataUsingContractAddressAndMnemonic("Ux8jntyBJQarjKGF8A==", "6Z3C3LDVWGMX23BMSYMANACQOSINPFIRF77H7N3AWJZYV6OH6GWTJKVMXY", "wish used round alert sock survey mind dilemma giraffe usage hockey thing rifle t" +
                    "rim swim fault sort denial phrase century hundred shoulder chat absent nation", "lKvoxpnatNLbjJs5iGWwXK144AYlIpEVe+S7A8VcKVDMktGlhxJD2M0kz2cFTeN9xnna4DsSCPCS5hHmV" +
                    "2qXDA==", ((string[])(null)));
#line hidden
        }
        
        public virtual void TealsignDataUsingProgramBytesAndMnemonic(string data, string program, string mn, string golden, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("data", data);
            argumentsOfScenario.Add("program", program);
            argumentsOfScenario.Add("mn", mn);
            argumentsOfScenario.Add("golden", golden);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tealsign data using program bytes and mnemonic", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
    testRunner.Given(string.Format("base64 encoded data to sign \"{0}\"", data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
    testRunner.And(string.Format("base64 encoded program \"{0}\"", program), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.And(string.Format("mnemonic for private key \"{0}\"", mn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.When("I perform tealsign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
    testRunner.Then(string.Format("the signature should be equal to \"{0}\"", golden), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Tealsign data using program bytes and mnemonic: Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tealsign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.tealsign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:data", "Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:program", "ASABASI=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:mn", "wish used round alert sock survey mind dilemma giraffe usage hockey thing rifle t" +
            "rim swim fault sort denial phrase century hundred shoulder chat absent nation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:golden", "lKvoxpnatNLbjJs5iGWwXK144AYlIpEVe+S7A8VcKVDMktGlhxJD2M0kz2cFTeN9xnna4DsSCPCS5hHmV" +
            "2qXDA==")]
        public virtual void TealsignDataUsingProgramBytesAndMnemonic_Ux8JntyBJQarjKGF8A()
        {
#line 15
  this.TealsignDataUsingProgramBytesAndMnemonic("Ux8jntyBJQarjKGF8A==", "ASABASI=", "wish used round alert sock survey mind dilemma giraffe usage hockey thing rifle t" +
                    "rim swim fault sort denial phrase century hundred shoulder chat absent nation", "lKvoxpnatNLbjJs5iGWwXK144AYlIpEVe+S7A8VcKVDMktGlhxJD2M0kz2cFTeN9xnna4DsSCPCS5hHmV" +
                    "2qXDA==", ((string[])(null)));
#line hidden
        }
        
        public virtual void TealsignDataUsingProgramBytesAndPrivateKeyBytes(string data, string program, string key, string golden, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("data", data);
            argumentsOfScenario.Add("program", program);
            argumentsOfScenario.Add("key", key);
            argumentsOfScenario.Add("golden", golden);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tealsign data using program bytes and private key bytes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 26
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
    testRunner.Given(string.Format("base64 encoded data to sign \"{0}\"", data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
    testRunner.And(string.Format("base64 encoded program \"{0}\"", program), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.And(string.Format("base64 encoded private key \"{0}\"", key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.When("I perform tealsign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
    testRunner.Then(string.Format("the signature should be equal to \"{0}\"", golden), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Tealsign data using program bytes and private key bytes: Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tealsign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.tealsign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:data", "Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:program", "ASABASI=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:key", "5Pf7eGMA52qfMT4R4/vYCt7con/7U3yejkdXkrcb26Q=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:golden", "lKvoxpnatNLbjJs5iGWwXK144AYlIpEVe+S7A8VcKVDMktGlhxJD2M0kz2cFTeN9xnna4DsSCPCS5hHmV" +
            "2qXDA==")]
        public virtual void TealsignDataUsingProgramBytesAndPrivateKeyBytes_Ux8JntyBJQarjKGF8A()
        {
#line 26
  this.TealsignDataUsingProgramBytesAndPrivateKeyBytes("Ux8jntyBJQarjKGF8A==", "ASABASI=", "5Pf7eGMA52qfMT4R4/vYCt7con/7U3yejkdXkrcb26Q=", "lKvoxpnatNLbjJs5iGWwXK144AYlIpEVe+S7A8VcKVDMktGlhxJD2M0kz2cFTeN9xnna4DsSCPCS5hHmV" +
                    "2qXDA==", ((string[])(null)));
#line hidden
        }
        
        public virtual void TealsignDataUsingContractAddressAndPrivateKeyBytes(string data, string hash, string key, string golden, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("data", data);
            argumentsOfScenario.Add("hash", hash);
            argumentsOfScenario.Add("key", key);
            argumentsOfScenario.Add("golden", golden);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tealsign data using contract address and private key bytes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
    testRunner.Given(string.Format("base64 encoded data to sign \"{0}\"", data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
    testRunner.And(string.Format("program hash \"{0}\"", hash), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
    testRunner.And(string.Format("base64 encoded private key \"{0}\"", key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
    testRunner.When("I perform tealsign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
    testRunner.Then(string.Format("the signature should be equal to \"{0}\"", golden), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Tealsign data using contract address and private key bytes: Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tealsign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.tealsign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:data", "Ux8jntyBJQarjKGF8A==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:hash", "6Z3C3LDVWGMX23BMSYMANACQOSINPFIRF77H7N3AWJZYV6OH6GWTJKVMXY")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:key", "5Pf7eGMA52qfMT4R4/vYCt7con/7U3yejkdXkrcb26Q=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:golden", "lKvoxpnatNLbjJs5iGWwXK144AYlIpEVe+S7A8VcKVDMktGlhxJD2M0kz2cFTeN9xnna4DsSCPCS5hHmV" +
            "2qXDA==")]
        public virtual void TealsignDataUsingContractAddressAndPrivateKeyBytes_Ux8JntyBJQarjKGF8A()
        {
#line 37
  this.TealsignDataUsingContractAddressAndPrivateKeyBytes("Ux8jntyBJQarjKGF8A==", "6Z3C3LDVWGMX23BMSYMANACQOSINPFIRF77H7N3AWJZYV6OH6GWTJKVMXY", "5Pf7eGMA52qfMT4R4/vYCt7con/7U3yejkdXkrcb26Q=", "lKvoxpnatNLbjJs5iGWwXK144AYlIpEVe+S7A8VcKVDMktGlhxJD2M0kz2cFTeN9xnna4DsSCPCS5hHmV" +
                    "2qXDA==", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
