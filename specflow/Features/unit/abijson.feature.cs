// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace algorand_tests.Features.Unit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AbiJsonFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "unit.abijson",
                "unit"};
        
#line 1 "abijson.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/unit", "AbiJson", null, ProgrammingLanguage.CSharp, new string[] {
                        "unit.abijson",
                        "unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "AbiJson")))
            {
                global::algorand_tests.Features.Unit.AbiJsonFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SerializeMethodObjectFromSigIntoJson(string methodsig, string jsonfile, string directory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("methodsig", methodsig);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            argumentsOfScenario.Add("directory", directory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize Method object from sig into json", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    testRunner.When(string.Format("I create the Method object from method signature \"{0}\"", methodsig), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
    testRunner.And("I serialize the Method object into json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
    testRunner.Then(string.Format("the produced json should equal \"{0}\" loaded from \"{1}\"", jsonfile, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Serialize Method object from sig into json: add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "addMethod.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void SerializeMethodObjectFromSigIntoJson_AddUint32Uint32Uint32()
        {
#line 4
  this.SerializeMethodObjectFromSigIntoJson("add(uint32,uint32)uint32", "addMethod.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Serialize Method object from sig into json: add(uint32,uint32)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add(uint32,uint32)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "add(uint32,uint32)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "addMethodVoid.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void SerializeMethodObjectFromSigIntoJson_AddUint32Uint32Void()
        {
#line 4
  this.SerializeMethodObjectFromSigIntoJson("add(uint32,uint32)void", "addMethodVoid.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Serialize Method object from sig into json: add()uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add()uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "add()uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "addMethodNoArgs.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void SerializeMethodObjectFromSigIntoJson_AddUint32()
        {
#line 4
  this.SerializeMethodObjectFromSigIntoJson("add()uint32", "addMethodNoArgs.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Serialize Method object from sig into json: add((uint32,uint32))(uint32,uint32)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add((uint32,uint32))(uint32,uint32)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "add((uint32,uint32))(uint32,uint32)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "addMethodTuple.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void SerializeMethodObjectFromSigIntoJson_AddUint32Uint32Uint32Uint32()
        {
#line 4
  this.SerializeMethodObjectFromSigIntoJson("add((uint32,uint32))(uint32,uint32)", "addMethodTuple.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Serialize Method object from sig into json: add(uint32,uint16)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add(uint32,uint16)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "add(uint32,uint16)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "addMethodUint16.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void SerializeMethodObjectFromSigIntoJson_AddUint32Uint16Uint32()
        {
#line 4
  this.SerializeMethodObjectFromSigIntoJson("add(uint32,uint16)uint32", "addMethodUint16.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Serialize Method object from sig into json: referenceTest(account,application,ass" +
            "et)uint8[3]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "referenceTest(account,application,asset)uint8[3]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "referenceTest(account,application,asset)uint8[3]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "referenceTestMethod.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void SerializeMethodObjectFromSigIntoJson_ReferenceTestAccountApplicationAssetUint83()
        {
#line 4
  this.SerializeMethodObjectFromSigIntoJson("referenceTest(account,application,asset)uint8[3]", "referenceTestMethod.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Serialize Method object from sig into json: txnTest(txn,pay,keyreg,acfg,axfer,afr" +
            "z,appl)bool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "txnTest(txn,pay,keyreg,acfg,axfer,afrz,appl)bool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "txnTest(txn,pay,keyreg,acfg,axfer,afrz,appl)bool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "txnTestMethod.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void SerializeMethodObjectFromSigIntoJson_TxnTestTxnPayKeyregAcfgAxferAfrzApplBool()
        {
#line 4
  this.SerializeMethodObjectFromSigIntoJson("txnTest(txn,pay,keyreg,acfg,axfer,afrz,appl)bool", "txnTestMethod.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        public virtual void CreateAndSerializeMethodObjectIntoJson(string name, string firstargtype, string secondargtype, string returntype, string jsonfile, string directory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("firstargtype", firstargtype);
            argumentsOfScenario.Add("secondargtype", secondargtype);
            argumentsOfScenario.Add("returntype", returntype);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            argumentsOfScenario.Add("directory", directory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and serialize Method object into json", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
    testRunner.When(string.Format("I create the Method object with name \"{0}\" first argument type \"{1}\" second argum" +
                            "ent type \"{2}\" and return type \"{3}\"", name, firstargtype, secondargtype, returntype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
    testRunner.And("I serialize the Method object into json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.Then(string.Format("the produced json should equal \"{0}\" loaded from \"{1}\"", jsonfile, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
    testRunner.And("the deserialized json should equal the original Method object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create and serialize Method object into json: add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:firstargtype", "uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:secondargtype", "uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:returntype", "uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "addMethod.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void CreateAndSerializeMethodObjectIntoJson_Add()
        {
#line 19
  this.CreateAndSerializeMethodObjectIntoJson("add", "uint32", "uint32", "uint32", "addMethod.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        public virtual void CreateAndSerializeMethodObjectIntoJsonWithArgNames(string name, string firstargname, string firstargtype, string secondargname, string secondargtype, string returntype, string jsonfile, string directory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("firstargname", firstargname);
            argumentsOfScenario.Add("firstargtype", firstargtype);
            argumentsOfScenario.Add("secondargname", secondargname);
            argumentsOfScenario.Add("secondargtype", secondargtype);
            argumentsOfScenario.Add("returntype", returntype);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            argumentsOfScenario.Add("directory", directory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and serialize Method object into json with arg names", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
    testRunner.When(string.Format("I create the Method object with name \"{0}\" first argument name \"{1}\" first argume" +
                            "nt type \"{2}\" second argument name \"{3}\" second argument type \"{4}\" and return t" +
                            "ype \"{5}\"", name, firstargname, firstargtype, secondargname, secondargtype, returntype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
    testRunner.And("I serialize the Method object into json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.Then(string.Format("the produced json should equal \"{0}\" loaded from \"{1}\"", jsonfile, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.And("the deserialized json should equal the original Method object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create and serialize Method object into json with arg names: add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:firstargname", "first")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:firstargtype", "uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:secondargname", "second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:secondargtype", "uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:returntype", "uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "addMethodWithArgNames.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void CreateAndSerializeMethodObjectIntoJsonWithArgNames_Add()
        {
#line 29
  this.CreateAndSerializeMethodObjectIntoJsonWithArgNames("add", "first", "uint32", "second", "uint32", "uint32", "addMethodWithArgNames.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        public virtual void CreateAndSerializeMethodObjectIntoJsonWithDescription(string name, string methoddesc, string firstargtype, string firstdesc, string secondargtype, string seconddesc, string returntype, string jsonfile, string directory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("methoddesc", methoddesc);
            argumentsOfScenario.Add("firstargtype", firstargtype);
            argumentsOfScenario.Add("firstdesc", firstdesc);
            argumentsOfScenario.Add("secondargtype", secondargtype);
            argumentsOfScenario.Add("seconddesc", seconddesc);
            argumentsOfScenario.Add("returntype", returntype);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            argumentsOfScenario.Add("directory", directory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and serialize Method object into json with description", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
    testRunner.When(string.Format("I create the Method object with name \"{0}\" method description \"{1}\" first argumen" +
                            "t type \"{2}\" first argument description \"{3}\" second argument type \"{4}\" second " +
                            "argument description \"{5}\" and return type \"{6}\"", name, methoddesc, firstargtype, firstdesc, secondargtype, seconddesc, returntype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
    testRunner.And("I serialize the Method object into json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
    testRunner.Then(string.Format("the produced json should equal \"{0}\" loaded from \"{1}\"", jsonfile, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
    testRunner.And("the deserialized json should equal the original Method object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create and serialize Method object into json with description: add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methoddesc", "method description")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:firstargtype", "uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:firstdesc", "first description")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:secondargtype", "uint16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:seconddesc", "second description")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:returntype", "uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "addMethodWithDescription.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void CreateAndSerializeMethodObjectIntoJsonWithDescription_Add()
        {
#line 39
  this.CreateAndSerializeMethodObjectIntoJsonWithDescription("add", "method description", "uint32", "first description", "uint16", "second description", "uint32", "addMethodWithDescription.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        public virtual void CheckTxnCountOfMethod(string methodsig, string txncount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("methodsig", methodsig);
            argumentsOfScenario.Add("txncount", txncount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check txn count of Method", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
    testRunner.When(string.Format("I create the Method object from method signature \"{0}\"", methodsig), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
    testRunner.Then(string.Format("the txn count should be {0}", txncount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check txn count of Method: add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txncount", "1")]
        public virtual void CheckTxnCountOfMethod_AddUint32Uint32Uint32()
        {
#line 49
  this.CheckTxnCountOfMethod("add(uint32,uint32)uint32", "1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check txn count of Method: txcalls(pay,bool,pay,axfer,byte)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "txcalls(pay,bool,pay,axfer,byte)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "txcalls(pay,bool,pay,axfer,byte)void")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txncount", "4")]
        public virtual void CheckTxnCountOfMethod_TxcallsPayBoolPayAxferByteVoid()
        {
#line 49
  this.CheckTxnCountOfMethod("txcalls(pay,bool,pay,axfer,byte)void", "4", ((string[])(null)));
#line hidden
        }
        
        public virtual void CheckMethodSelectorFromMethod(string methodsig, string methodselector, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("methodsig", methodsig);
            argumentsOfScenario.Add("methodselector", methodselector);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check method selector from Method", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
    testRunner.When(string.Format("I create the Method object from method signature \"{0}\"", methodsig), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
    testRunner.Then(string.Format("the method selector should be \"{0}\"", methodselector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check method selector from Method: add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodselector", "3e1e52bd")]
        public virtual void CheckMethodSelectorFromMethod_AddUint32Uint32Uint32()
        {
#line 58
  this.CheckMethodSelectorFromMethod("add(uint32,uint32)uint32", "3e1e52bd", ((string[])(null)));
#line hidden
        }
        
        public virtual void SerializeInterfaceIntoJson(string methodsig, string name, string description, string jsonfile, string directory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("methodsig", methodsig);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            argumentsOfScenario.Add("directory", directory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize Interface into json", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 66
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
    testRunner.When(string.Format("I create the Method object from method signature \"{0}\"", methodsig), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
    testRunner.And(string.Format("I create an Interface object from the Method object with name \"{0}\" and descripti" +
                            "on \"{1}\"", name, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
    testRunner.And("I serialize the Interface object into json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
    testRunner.Then(string.Format("the produced json should equal \"{0}\" loaded from \"{1}\"", jsonfile, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.And("the deserialized json should equal the original Interface object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Serialize Interface into json: add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "ExampleInterface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "This is an example interface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "interface.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void SerializeInterfaceIntoJson_AddUint32Uint32Uint32()
        {
#line 66
  this.SerializeInterfaceIntoJson("add(uint32,uint32)uint32", "ExampleInterface", "This is an example interface", "interface.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
        
        public virtual void SerializeContractIntoJson(string methodsig, string name, string description, string network1, string network1_App_Id, string network2, string network2_App_Id, string jsonfile, string directory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("methodsig", methodsig);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("network1", network1);
            argumentsOfScenario.Add("network1-app-id", network1_App_Id);
            argumentsOfScenario.Add("network2", network2);
            argumentsOfScenario.Add("network2-app-id", network2_App_Id);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            argumentsOfScenario.Add("directory", directory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize Contract into json", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 77
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
    testRunner.When(string.Format("I create the Method object from method signature \"{0}\"", methodsig), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
    testRunner.And(string.Format("I create a Contract object from the Method object with name \"{0}\" and description" +
                            " \"{1}\"", name, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.And(string.Format("I set the Contract\'s appID to {0} for the network \"{1}\"", network1_App_Id, network1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
    testRunner.And(string.Format("I set the Contract\'s appID to {0} for the network \"{1}\"", network2_App_Id, network2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
    testRunner.And("I serialize the Contract object into json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
    testRunner.Then(string.Format("the produced json should equal \"{0}\" loaded from \"{1}\"", jsonfile, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
    testRunner.And("the deserialized json should equal the original Contract object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Serialize Contract into json: add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AbiJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.abijson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:methodsig", "add(uint32,uint32)uint32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "ExampleContract")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "This is an example contract")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:network1", "wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:network1-app-id", "1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:network2", "SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:network2-app-id", "5678")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "contract.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "abi_responsejsons")]
        public virtual void SerializeContractIntoJson_AddUint32Uint32Uint32()
        {
#line 77
  this.SerializeContractIntoJson("add(uint32,uint32)uint32", "ExampleContract", "This is an example contract", "wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=", "1234", "SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=", "5678", "contract.json", "abi_responsejsons", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
