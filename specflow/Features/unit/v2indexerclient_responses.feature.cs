// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace algorand_tests.Features.Unit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class IndexerClientV2ResponsesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "unit"};
        
#line 1 "v2indexerclient_responses.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/unit", "Indexer Client v2 Responses", null, ProgrammingLanguage.CSharp, new string[] {
                        "unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Indexer Client v2 Responses")))
            {
                global::algorand_tests.Features.Unit.IndexerClientV2ResponsesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void LookupAssetBalancesResponse(string jsonfiles, string directory, string err, string roundNum, string len, string idx, string address, string amount, string frozenState, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("roundNum", roundNum);
            argumentsOfScenario.Add("len", len);
            argumentsOfScenario.Add("idx", idx);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("frozenState", frozenState);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LookupAssetBalances response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
    testRunner.When("we make any LookupAssetBalances call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
    testRunner.Then(string.Format("expect error string to contain \"{0}\"", err), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
    testRunner.And(string.Format("the parsed LookupAssetBalances response should be valid on round {0}, and contain" +
                            " an array of len {1} and element number {2} should have address \"{3}\" amount {4}" +
                            " and frozen state \"{5}\"", roundNum, len, idx, address, amount, frozenState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("LookupAssetBalances response: lookupAssetBalances_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "lookupAssetBalances_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "lookupAssetBalances_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:roundNum", "6222956")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:len", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:idx", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "B2IID7Y54ROV2H6OXO3IXVSF64CBJ2GLEKCHYE2ZZE63RBMROO5FARL4IQ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "4900000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:frozenState", "false")]
        public virtual void LookupAssetBalancesResponse_LookupAssetBalances_0_Json()
        {
#line 5
  this.LookupAssetBalancesResponse("lookupAssetBalances_0.json", "v2indexerclient_responsejsons", "", "6222956", "22", "1", "B2IID7Y54ROV2H6OXO3IXVSF64CBJ2GLEKCHYE2ZZE63RBMROO5FARL4IQ", "4900000", "false", ((string[])(null)));
#line hidden
        }
        
        public virtual void LookupAssetTransactionsResponse(string jsonfiles, string directory, string err, string roundNum, string len, string idx, string sender, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("roundNum", roundNum);
            argumentsOfScenario.Add("len", len);
            argumentsOfScenario.Add("idx", idx);
            argumentsOfScenario.Add("sender", sender);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LookupAssetTransactions response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
    testRunner.When("we make any LookupAssetTransactions call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then(string.Format("expect error string to contain \"{0}\"", err), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
    testRunner.And(string.Format("the parsed LookupAssetTransactions response should be valid on round {0}, and con" +
                            "tain an array of len {1} and element number {2} should have sender \"{3}\"", roundNum, len, idx, sender), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("LookupAssetTransactions response: lookupAssetTransactions_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "lookupAssetTransactions_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "lookupAssetTransactions_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:roundNum", "6222957")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:len", "39")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:idx", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sender", "ARCC3TMGVD7KXY7GYTE7U5XXUJXFRD2SXLAWRV57XJ6HWHRR37GNGNMPSY")]
        public virtual void LookupAssetTransactionsResponse_LookupAssetTransactions_0_Json()
        {
#line 15
  this.LookupAssetTransactionsResponse("lookupAssetTransactions_0.json", "v2indexerclient_responsejsons", "", "6222957", "39", "0", "ARCC3TMGVD7KXY7GYTE7U5XXUJXFRD2SXLAWRV57XJ6HWHRR37GNGNMPSY", ((string[])(null)));
#line hidden
        }
        
        public virtual void LookupAccountTransactionsResponse(string jsonfiles, string directory, string err, string roundNum, string len, string idx, string sender, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("roundNum", roundNum);
            argumentsOfScenario.Add("len", len);
            argumentsOfScenario.Add("idx", idx);
            argumentsOfScenario.Add("sender", sender);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LookupAccountTransactions response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
    testRunner.When("we make any LookupAccountTransactions call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
    testRunner.Then(string.Format("expect error string to contain \"{0}\"", err), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
    testRunner.And(string.Format("the parsed LookupAccountTransactions response should be valid on round {0}, and c" +
                            "ontain an array of len {1} and element number {2} should have sender \"{3}\"", roundNum, len, idx, sender), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("LookupAccountTransactions response: lookupAccountTransactions_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "lookupAccountTransactions_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "lookupAccountTransactions_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:roundNum", "6222956")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:len", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:idx", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sender", "N/A")]
        public virtual void LookupAccountTransactionsResponse_LookupAccountTransactions_0_Json()
        {
#line 25
  this.LookupAccountTransactionsResponse("lookupAccountTransactions_0.json", "v2indexerclient_responsejsons", "", "6222956", "0", "0", "N/A", ((string[])(null)));
#line hidden
        }
        
        public virtual void LookupBlockResponse(string jsonfiles, string directory, string err, string prevHash, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("prevHash", prevHash);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LookupBlock response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
    testRunner.When("we make any LookupBlock call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
    testRunner.Then(string.Format("expect error string to contain \"{0}\"", err), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.And(string.Format("the parsed LookupBlock response should have previous block hash \"{0}\"", prevHash), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("LookupBlock response: lookupBlock_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "lookupBlock_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "lookupBlock_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:prevHash", "jIYt/5YlDB/fzOoLIZXKwCD9e9Y37YXoz3umPCoo7Rw=")]
        public virtual void LookupBlockResponse_LookupBlock_0_Json()
        {
#line 35
  this.LookupBlockResponse("lookupBlock_0.json", "v2indexerclient_responsejsons", "", "jIYt/5YlDB/fzOoLIZXKwCD9e9Y37YXoz3umPCoo7Rw=", ((string[])(null)));
#line hidden
        }
        
        public virtual void LookupAccountByIDResponse(string jsonfiles, string directory, string err, string address, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("address", address);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LookupAccountByID response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 45
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
    testRunner.When("we make any LookupAccountByID call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
    testRunner.Then(string.Format("expect error string to contain \"{0}\"", err), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
    testRunner.And(string.Format("the parsed LookupAccountByID response should have address \"{0}\"", address), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("LookupAccountByID response: lookupAccountByID_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "lookupAccountByID_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "lookupAccountByID_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "BZNKXBBXIVZ7GFAXHNC26ERYUD5TQWWV327IU2N4SKG6WLNFGMMCRQEFZE")]
        public virtual void LookupAccountByIDResponse_LookupAccountByID_0_Json()
        {
#line 45
  this.LookupAccountByIDResponse("lookupAccountByID_0.json", "v2indexerclient_responsejsons", "", "BZNKXBBXIVZ7GFAXHNC26ERYUD5TQWWV327IU2N4SKG6WLNFGMMCRQEFZE", ((string[])(null)));
#line hidden
        }
        
        public virtual void LookupAssetByIDResponse(string jsonfiles, string directory, string err, string index, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("index", index);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LookupAssetByID response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
    testRunner.When("we make any LookupAssetByID call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.Then(string.Format("expect error string to contain \"{0}\"", err), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.And(string.Format("the parsed LookupAssetByID response should have index {0}", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("LookupAssetByID response: lookupAssetByID_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "lookupAssetByID_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "lookupAssetByID_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:index", "163650")]
        public virtual void LookupAssetByIDResponse_LookupAssetByID_0_Json()
        {
#line 55
  this.LookupAssetByIDResponse("lookupAssetByID_0.json", "v2indexerclient_responsejsons", "", "163650", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchAccountsResponse(string jsonfiles, string directory, string err, string roundNum, string len, string index, string address, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("roundNum", roundNum);
            argumentsOfScenario.Add("len", len);
            argumentsOfScenario.Add("index", index);
            argumentsOfScenario.Add("address", address);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SearchAccounts response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 65
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 66
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
    testRunner.When("we make any SearchAccounts call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
    testRunner.Then(string.Format("expect error string to contain \"{0}\"", err), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.And(string.Format("the parsed SearchAccounts response should be valid on round {0} and the array sho" +
                            "uld be of len {1} and the element at index {2} should have address \"{3}\"", roundNum, len, index, address), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SearchAccounts response: searchForAccounts_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "searchForAccounts_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "searchForAccounts_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:roundNum", "6222956")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:len", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:index", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "BZNKXBBXIVZ7GFAXHNC26ERYUD5TQWWV327IU2N4SKG6WLNFGMMCRQEFZE")]
        public virtual void SearchAccountsResponse_SearchForAccounts_0_Json()
        {
#line 65
  this.SearchAccountsResponse("searchForAccounts_0.json", "v2indexerclient_responsejsons", "", "6222956", "1", "0", "BZNKXBBXIVZ7GFAXHNC26ERYUD5TQWWV327IU2N4SKG6WLNFGMMCRQEFZE", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchForTransactionsResponse(string jsonfiles, string directory, string err, string roundNum, string len, string index, string sender, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("roundNum", roundNum);
            argumentsOfScenario.Add("len", len);
            argumentsOfScenario.Add("index", index);
            argumentsOfScenario.Add("sender", sender);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SearchForTransactions response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 75
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 76
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
    testRunner.When("we make any SearchForTransactions call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
    testRunner.Then(string.Format("expect error string to contain \"{0}\"", err), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
    testRunner.And(string.Format("the parsed SearchForTransactions response should be valid on round {0} and the ar" +
                            "ray should be of len {1} and the element at index {2} should have sender \"{3}\"", roundNum, len, index, sender), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SearchForTransactions response: searchForTransactions_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "searchForTransactions_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "searchForTransactions_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:roundNum", "6222958")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:len", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:index", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sender", "I3345FUQQ2GRBHFZQPLYQQX5HJMMRZMABCHRLWV6RCJYC6OO4MOLEUBEGU")]
        public virtual void SearchForTransactionsResponse_SearchForTransactions_0_Json()
        {
#line 75
  this.SearchForTransactionsResponse("searchForTransactions_0.json", "v2indexerclient_responsejsons", "", "6222958", "10", "0", "I3345FUQQ2GRBHFZQPLYQQX5HJMMRZMABCHRLWV6RCJYC6OO4MOLEUBEGU", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchForAssetsResponse(string jsonfiles, string directory, string err, string roundNum, string len, string index, string assetIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("roundNum", roundNum);
            argumentsOfScenario.Add("len", len);
            argumentsOfScenario.Add("index", index);
            argumentsOfScenario.Add("assetIndex", assetIndex);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SearchForAssets response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
    testRunner.When("we make any SearchForAssets call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
    testRunner.Then(string.Format("expect error string to contain \"{0}\"", err), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
    testRunner.And(string.Format("the parsed SearchForAssets response should be valid on round {0} and the array sh" +
                            "ould be of len {1} and the element at index {2} should have asset index {3}", roundNum, len, index, assetIndex), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SearchForAssets response: searchForAssets_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "searchForAssets_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "searchForAssets_0.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:roundNum", "6222956")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:len", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:index", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:assetIndex", "5")]
        public virtual void SearchForAssetsResponse_SearchForAssets_0_Json()
        {
#line 85
  this.SearchForAssetsResponse("searchForAssets_0.json", "v2indexerclient_responsejsons", "", "6222956", "3", "0", "5", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchForAccountsResponseAuthorizingAddress(string jsonfiles, string directory, string err, string roundNum, string len, string index, string authaddr, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer.rekey"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("roundNum", roundNum);
            argumentsOfScenario.Add("len", len);
            argumentsOfScenario.Add("index", index);
            argumentsOfScenario.Add("authaddr", authaddr);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SearchForAccounts response, authorizing address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 96
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
    testRunner.When("we make any SearchAccounts call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
    testRunner.And(string.Format("the parsed SearchAccounts response should be valid on round {0} and the array sho" +
                            "uld be of len {1} and the element at index {2} should have authorizing address \"" +
                            "{3}\"", roundNum, len, index, authaddr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SearchForAccounts response, authorizing address: searchForAccounts_1.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer.rekey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "searchForAccounts_1.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "searchForAccounts_1.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:roundNum", "6222956")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:len", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:index", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:authaddr", "PRIC4GIQTJFD2SZIEQGAYBV2KUJ7YQR3EV3KSOZKLOHPDNRDXXVWMHDAQA")]
        public virtual void SearchForAccountsResponseAuthorizingAddress_SearchForAccounts_1_Json()
        {
#line 95
  this.SearchForAccountsResponseAuthorizingAddress("searchForAccounts_1.json", "v2indexerclient_responsejsons", "", "6222956", "1", "0", "PRIC4GIQTJFD2SZIEQGAYBV2KUJ7YQR3EV3KSOZKLOHPDNRDXXVWMHDAQA", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchForTransactionsResponseRekey_To(string jsonfiles, string directory, string err, string roundNum, string len, string index, string rekeyto, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "unit.indexer.rekey"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonfiles", jsonfiles);
            argumentsOfScenario.Add("directory", directory);
            argumentsOfScenario.Add("err", err);
            argumentsOfScenario.Add("roundNum", roundNum);
            argumentsOfScenario.Add("len", len);
            argumentsOfScenario.Add("index", index);
            argumentsOfScenario.Add("rekeyto", rekeyto);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SearchForTransactions response, rekey-to", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 104
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 105
    testRunner.Given(string.Format("mock http responses in \"{0}\" loaded from \"{1}\"", jsonfiles, directory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 106
    testRunner.When("we make any SearchForTransactions call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
    testRunner.And(string.Format("the parsed SearchForTransactions response should be valid on round {0} and the ar" +
                            "ray should be of len {1} and the element at index {2} should have rekey-to \"{3}\"" +
                            "", roundNum, len, index, rekeyto), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SearchForTransactions response, rekey-to: searchForTransactions_1.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Client v2 Responses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.indexer.rekey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "searchForTransactions_1.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfiles", "searchForTransactions_1.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:directory", "v2indexerclient_responsejsons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:err", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:roundNum", "6222958")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:len", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:index", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rekeyto", "PRIC4GIQTJFD2SZIEQGAYBV2KUJ7YQR3EV3KSOZKLOHPDNRDXXVWMHDAQA")]
        public virtual void SearchForTransactionsResponseRekey_To_SearchForTransactions_1_Json()
        {
#line 104
  this.SearchForTransactionsResponseRekey_To("searchForTransactions_1.json", "v2indexerclient_responsejsons", "", "6222958", "10", "1", "PRIC4GIQTJFD2SZIEQGAYBV2KUJ7YQR3EV3KSOZKLOHPDNRDXXVWMHDAQA", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
