// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace algorand_tests.Features.Integration
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ContractToContractInteractionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "c2c"};
        
#line 1 "c2c.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/integration", "Contract to Contract Interaction", null, ProgrammingLanguage.CSharp, new string[] {
                        "c2c"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Contract to Contract Interaction")))
            {
                global::algorand_tests.Features.Integration.ContractToContractInteractionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("c2c:")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Contract to Contract Interaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("c2c")]
        public virtual void C2C()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("c2c:", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    testRunner.And("an algod v2 client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 5
    testRunner.And("a kmd client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 6
    testRunner.And("wallet information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 7
    testRunner.And("suggested transaction parameters from the algod v2 client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 8
    testRunner.And("I create a new transient account and fund it with 100000000 microalgos.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 9
    testRunner.And("I make a transaction signer for the transient account.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 10
    testRunner.And("I reset the array of application IDs to remember.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 13
    testRunner.When(@"I build an application transaction with the transient account, the current application, suggested params, operation ""create"", approval-program ""programs/fake_random.teal"", clear-program ""programs/six.teal"", global-bytes 0, global-ints 1, local-bytes 0, local-ints 0, app-args """", foreign-apps """", foreign-assets """", app-accounts """", extra-pages 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.And("I sign and submit the transaction, saving the txid. If there is an error it is \"\"" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
    testRunner.And("I wait for the transaction to be confirmed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.Given("I remember the new application ID.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
    testRunner.Given("I add the nonce \"Thing One\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
    testRunner.When("I create the Method object from method signature \"randInt(uint64)(uint64,byte[17]" +
                        ")\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 24
    testRunner.And("I append the encoded arguments \"AAAAAAAAACo=\" to the method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 25
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 28
    testRunner.Given("I add the nonce \"Thing Two\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
    testRunner.When("I create the Method object from method signature \"randInt(uint64)(uint64,byte[17]" +
                        ")\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 31
    testRunner.And("I append the encoded arguments \"AAAAAAAABTk=\" to the method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 32
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 34
    testRunner.Then("I build the transaction group with the composer. If there is an error it is \"\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
    testRunner.Then("I gather signatures with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
    testRunner.And("I execute the current transaction group with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
    testRunner.Then("The composer should have a status of \"COMMITTED\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
    testRunner.And("The app should have returned ABI types \"(uint64,byte[17]):(uint64,byte[17])\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
    testRunner.And("The 0th atomic result for randomInt(42) proves correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
    testRunner.And("The 1th atomic result for randomInt(1337) proves correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
    testRunner.And("I can dig the 0th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
    testRunner.And("I can dig the 1th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.When(@"I build an application transaction with the transient account, the current application, suggested params, operation ""create"", approval-program ""programs/random_byte.teal"", clear-program ""programs/six.teal"", global-bytes 0, global-ints 0, local-bytes 0, local-ints 0, app-args """", foreign-apps """", foreign-assets """", app-accounts """", extra-pages 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
    testRunner.And("I sign and submit the transaction, saving the txid. If there is an error it is \"\"" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.And("I wait for the transaction to be confirmed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.Given("I remember the new application ID.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
    testRunner.And("I fund the current application\'s address with 100000000 microalgos.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
    testRunner.Given("I add the nonce \"Thing One\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
    testRunner.When("I create the Method object from method signature \"randElement(string,application)" +
                        "(byte,byte[17])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 58
    testRunner.And("I append the encoded arguments \"AAVoZWxsbw==,ctxAppIdx:0\" to the method arguments" +
                        " array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 59
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 62
    testRunner.Given("I add the nonce \"Thing Two\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
    testRunner.When("I create the Method object from method signature \"randElement(string,application)" +
                        "(byte,byte[17])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 65
    testRunner.And("I append the encoded arguments \"AAdnb29kYnll,ctxAppIdx:0\" to the method arguments" +
                        " array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 66
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 68
    testRunner.Then("I build the transaction group with the composer. If there is an error it is \"\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.Then("I gather signatures with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.And("I execute the current transaction group with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
    testRunner.Then("The composer should have a status of \"COMMITTED\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.And("The app should have returned ABI types \"(byte,byte[17]):(byte,byte[17])\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("The 0th atomic result for randElement(\"hello\") proves correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
    testRunner.And("The 1th atomic result for randElement(\"goodbye\") proves correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
    testRunner.And("I can dig the 0th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
    testRunner.And("I can dig the 1th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.0.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
    testRunner.When(@"I build an application transaction with the transient account, the current application, suggested params, operation ""create"", approval-program ""programs/slot_machine.teal"", clear-program ""programs/six.teal"", global-bytes 3, global-ints 1, local-bytes 0, local-ints 0, app-args """", foreign-apps """", foreign-assets """", app-accounts """", extra-pages 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
    testRunner.And("I sign and submit the transaction, saving the txid. If there is an error it is \"\"" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("I wait for the transaction to be confirmed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.Given("I remember the new application ID.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
    testRunner.And("I fund the current application\'s address with 100000000 microalgos.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
    testRunner.Given("I add the nonce \"Thing One\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
    testRunner.When("I create the Method object from method signature \"spin(application,application)(b" +
                        "yte[3],byte[17],byte[17],byte[17])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 96
    testRunner.And("I append the encoded arguments \"ctxAppIdx:0,ctxAppIdx:1\" to the method arguments " +
                        "array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 97
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 100
    testRunner.Given("I add the nonce \"Thing Two\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
    testRunner.When("I create the Method object from method signature \"spin(application,application)(b" +
                        "yte[3],byte[17],byte[17],byte[17])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 103
    testRunner.And("I append the encoded arguments \"ctxAppIdx:0,ctxAppIdx:1\" to the method arguments " +
                        "array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 104
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 107
    testRunner.Then("I build the transaction group with the composer. If there is an error it is \"\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
    testRunner.And("I gather signatures with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
    testRunner.And("I execute the current transaction group with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
    testRunner.And("The composer should have a status of \"COMMITTED\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
    testRunner.And("The app should have returned ABI types \"(byte[3],byte[17],byte[17],byte[17]):(byt" +
                        "e[3],byte[17],byte[17],byte[17])\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And("I dig into the paths \"0,0:0,1:0,2\" of the resulting atomic transaction tree I see" +
                        " group ids and they are all the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And("I can dig the 0th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.1.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.1.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.2.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.2.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
    testRunner.And("I can dig the 1th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.0.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.0.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.1.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.1.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.2.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.2.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
    testRunner.And("The 0th atomic result for \"spin()\" satisfies the regex \"^[@!-][@!-][@!-]$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
    testRunner.And("The 1th atomic result for \"spin()\" satisfies the regex \"^[@!-][@!-][@!-]$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.inner-txns.0.global-state" +
                        "-delta.0.key\" and see the value \"Y291bnRlcg==\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.inner-txns.0.global-state" +
                        "-delta.0.value.action\" and see the value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.inner-txns.0.global-state" +
                        "-delta.0.value.uint\" and see the value \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
    testRunner.Given("a new AtomicTransactionComposer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 138
    testRunner.Given("I add the nonce \"Thing One\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 139
    testRunner.When("I create the Method object from method signature \"spin(application,application)(b" +
                        "yte[3],byte[17],byte[17],byte[17])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 141
    testRunner.And("I append the encoded arguments \"ctxAppIdx:0,ctxAppIdx:1\" to the method arguments " +
                        "array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 142
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 145
    testRunner.Given("I add the nonce \"Thing Two\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
    testRunner.When("I create the Method object from method signature \"spin(application,application)(b" +
                        "yte[3],byte[17],byte[17],byte[17])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 147
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 148
    testRunner.And("I append the encoded arguments \"ctxAppIdx:0,ctxAppIdx:1\" to the method arguments " +
                        "array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 149
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 152
    testRunner.Given("I add the nonce \"Thing Three\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
    testRunner.When("I create the Method object from method signature \"setReels(string,string,string)v" +
                        "oid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 154
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 155
    testRunner.And("I append the encoded arguments \"AAowMTIzNDU2Nzg5,AAdhYmNkZWZn,AAlISUpLTE1OT1A=\" t" +
                        "o the method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 156
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 159
    testRunner.Given("I add the nonce \"Thing Four\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 160
    testRunner.When("I create the Method object from method signature \"spin(application,application)(b" +
                        "yte[3],byte[17],byte[17],byte[17])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 161
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 162
    testRunner.And("I append the encoded arguments \"ctxAppIdx:0,ctxAppIdx:1\" to the method arguments " +
                        "array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 163
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 166
    testRunner.Given("I add the nonce \"Thing Five\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
    testRunner.When("I create the Method object from method signature \"spin(application,application)(b" +
                        "yte[3],byte[17],byte[17],byte[17])\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
    testRunner.And("I create a new method arguments array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 169
    testRunner.And("I append the encoded arguments \"ctxAppIdx:0,ctxAppIdx:1\" to the method arguments " +
                        "array.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 170
    testRunner.And("I add a nonced method call with the transient account, the current application, s" +
                        "uggested params, on complete \"noop\", current transaction signer, current method " +
                        "arguments.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 173
    testRunner.Then("I build the transaction group with the composer. If there is an error it is \"\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
    testRunner.And("I gather signatures with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
    testRunner.And("I execute the current transaction group with the composer.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
    testRunner.And("The composer should have a status of \"COMMITTED\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
    testRunner.And("The app should have returned ABI types \"(byte[3],byte[17],byte[17],byte[17]):(byt" +
                        "e[3],byte[17],byte[17],byte[17]):void:(byte[3],byte[17],byte[17],byte[17]):(byte" +
                        "[3],byte[17],byte[17],byte[17])\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
    testRunner.And("I dig into the paths \"0,0:0,1:0,2\" of the resulting atomic transaction tree I see" +
                        " group ids and they are all the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
    testRunner.And("I dig into the paths \"4,0:4,1:4,2\" of the resulting atomic transaction tree I see" +
                        " group ids and they are all the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
    testRunner.And("I can dig the 0th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.1.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.1.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.2.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.2.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
    testRunner.And("I can dig the 1th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.0.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.0.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.1.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.1.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.2.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
    testRunner.And("I can dig the 1th atomic result with path \"inner-txns.2.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
    testRunner.And("I can dig the 2th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
    testRunner.And("I can dig the 3th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
    testRunner.And("I can dig the 3th atomic result with path \"inner-txns.0.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
    testRunner.And("I can dig the 3th atomic result with path \"inner-txns.0.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
    testRunner.And("I can dig the 3th atomic result with path \"inner-txns.1.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
    testRunner.And("I can dig the 3th atomic result with path \"inner-txns.1.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
    testRunner.And("I can dig the 3th atomic result with path \"inner-txns.2.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
    testRunner.And("I can dig the 3th atomic result with path \"inner-txns.2.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
    testRunner.And("I can dig the 4th atomic result with path \"txn.txn.type\" and see the value \"appl\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
    testRunner.And("I can dig the 4th atomic result with path \"inner-txns.0.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
    testRunner.And("I can dig the 4th atomic result with path \"inner-txns.0.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 210
    testRunner.And("I can dig the 4th atomic result with path \"inner-txns.1.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 211
    testRunner.And("I can dig the 4th atomic result with path \"inner-txns.1.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 212
    testRunner.And("I can dig the 4th atomic result with path \"inner-txns.2.txn.txn.type\" and see the" +
                        " value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 213
    testRunner.And("I can dig the 4th atomic result with path \"inner-txns.2.inner-txns.0.txn.txn.type" +
                        "\" and see the value \"appl\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
    testRunner.And("The 0th atomic result for \"spin()\" satisfies the regex \"^[@!-][@!-][@!-]$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
    testRunner.And("The 1th atomic result for \"spin()\" satisfies the regex \"^[@!-][@!-][@!-]$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
    testRunner.And("The 3th atomic result for \"spin()\" satisfies the regex \"^[0-9][a-g][H-P]$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
    testRunner.And("The 4th atomic result for \"spin()\" satisfies the regex \"^[0-9][a-g][H-P]$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.inner-txns.0.global-state" +
                        "-delta.0.key\" and see the value \"Y291bnRlcg==\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.inner-txns.0.global-state" +
                        "-delta.0.value.action\" and see the value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
    testRunner.And("I can dig the 0th atomic result with path \"inner-txns.0.inner-txns.0.global-state" +
                        "-delta.0.value.uint\" and see the value \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 222
    testRunner.And("I can dig the 4th atomic result with path \"inner-txns.2.inner-txns.0.global-state" +
                        "-delta.0.key\" and see the value \"Y291bnRlcg==\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 223
    testRunner.And("I can dig the 4th atomic result with path \"inner-txns.2.inner-txns.0.global-state" +
                        "-delta.0.value.action\" and see the value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 224
    testRunner.And("I can dig the 4th atomic result with path \"inner-txns.2.inner-txns.0.global-state" +
                        "-delta.0.value.uint\" and see the value \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
