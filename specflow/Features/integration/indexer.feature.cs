// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace algorand_tests.Features.Integration
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class IndexerIntegrationTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "indexer.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/integration", "Indexer Integration Tests", "    For all queries, parameters will not be set for default values as defined by:" +
                    "\r\n    * Numeric inputs: 0\r\n    * String inputs: \"\"", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Indexer Integration Tests")))
            {
                global::algorand_tests.Features.Integration.IndexerIntegrationTestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
  #line hidden
#line 8
    testRunner.Given("indexer client 1 at \"localhost\" port 59999 with token \"aaaaaaaaaaaaaaaaaaaaaaaaaa" +
                    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.Given("indexer client 2 at \"localhost\" port 59998 with token \"aaaaaaaaaaaaaaaaaaaaaaaaaa" +
                    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
    testRunner.Given("indexer client 3 at \"localhost\" port 59997 with token \"aaaaaaaaaaaaaaaaaaaaaaaaaa" +
                    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
    testRunner.Given("indexer client 4 at \"localhost\" port 59996 with token \"aaaaaaaaaaaaaaaaaaaaaaaaaa" +
                    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void Health(string indexer, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("status", status);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/health", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 17
    testRunner.When(string.Format("I use {0} to check the services health", indexer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then(string.Format("I receive status code {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/health: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "200")]
        public virtual void Health_1()
        {
#line 16
  this.Health("1", "200", ((string[])(null)));
#line hidden
        }
        
        public virtual void BlocksNumber(string indexer, string number, string timestamp, string num, string hash, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("timestamp", timestamp);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("hash", hash);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/blocks/<number>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 29
    testRunner.When(string.Format("I use {0} to lookup block {1}", indexer, number), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
    testRunner.Then(string.Format("The block was confirmed at {0}, contains {1} transactions, has the previous block" +
                            " hash \"{2}\"", timestamp, num, hash), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/blocks/<number>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:number", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:timestamp", "1585684086")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:hash", "PpPusF+bU/uNLS5ODG/hG0pP0vehdSSlBcnnyZDr770=")]
        public virtual void BlocksNumber_Variant0()
        {
#line 28
  this.BlocksNumber("1", "7", "1585684086", "8", "PpPusF+bU/uNLS5ODG/hG0pP0vehdSSlBcnnyZDr770=", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/blocks/<number>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:number", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:timestamp", "1585684138")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:hash", "9jzxFIKLoTGkFl60aqGwyzO0AVyMBnbs/Wb5R9hPrsA=")]
        public virtual void BlocksNumber_Variant1()
        {
#line 28
  this.BlocksNumber("1", "20", "1585684138", "2", "9jzxFIKLoTGkFl60aqGwyzO0AVyMBnbs/Wb5R9hPrsA=", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/blocks/<number>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:number", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:timestamp", "1585684463")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:hash", "rEWRbwgzDagT5wYTf9TuiuC+VR3XLLy4S73vInxkmrA=")]
        public virtual void BlocksNumber_Variant2()
        {
#line 28
  this.BlocksNumber("1", "100", "1585684463", "0", "rEWRbwgzDagT5wYTf9TuiuC+VR3XLLy4S73vInxkmrA=", ((string[])(null)));
#line hidden
        }
        
        public virtual void HasAsset_AccountAccount(string indexer, string account, string num, string index, string frozen, string units, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("account", account);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("index", index);
            argumentsOfScenario.Add("frozen", frozen);
            argumentsOfScenario.Add("units", units);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("has asset - /account/<account>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 43
    testRunner.When(string.Format("I use {0} to lookup account \"{1}\" at round 0", indexer, account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.Then(string.Format("The account has {0} assets, the first is asset {1} has a frozen status of \"{2}\" a" +
                            "nd amount {3}.", num, index, frozen, units), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("has asset - /account/<account>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:index", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:frozen", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:units", "999931337000")]
        public virtual void HasAsset_AccountAccount_Variant0()
        {
#line 42
  this.HasAsset_AccountAccount("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "1", "9", "false", "999931337000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("has asset - /account/<account>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:index", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:frozen", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:units", "68663000")]
        public virtual void HasAsset_AccountAccount_Variant1()
        {
#line 42
  this.HasAsset_AccountAccount("1", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA", "1", "9", "false", "68663000", ((string[])(null)));
#line hidden
        }
        
        public virtual void Creator_AccountAccount(string indexer, string account, string num, string index, string name, string total, string unit, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("account", account);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("index", index);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("total", total);
            argumentsOfScenario.Add("unit", unit);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("creator - /account/<account>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 53
    testRunner.When(string.Format("I use {0} to lookup account \"{1}\" at round 0", indexer, account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
    testRunner.Then(string.Format("The account created {0} assets, the first is asset {1} is named \"{2}\" with a tota" +
                            "l amount of {3} \"{4}\"", num, index, name, total, unit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("creator - /account/<account>: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:index", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "bogocoin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:total", "1000000000000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "bogo")]
        public virtual void Creator_AccountAccount_1()
        {
#line 52
  this.Creator_AccountAccount("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "1", "9", "bogocoin", "1000000000000", "bogo", ((string[])(null)));
#line hidden
        }
        
        public virtual void Lookup_AccountAccount(string indexer, string account, string μalgos, string num, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("account", account);
            argumentsOfScenario.Add("μalgos", μalgos);
            argumentsOfScenario.Add("num", num);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("lookup - /account/<account>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 62
    testRunner.When(string.Format("I use {0} to lookup account \"{1}\" at round 0", indexer, account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
    testRunner.Then(string.Format("The account has {0} μalgos and {1} assets, 0 has 0", μalgos, num), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("lookup - /account/<account>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999899126000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        public virtual void Lookup_AccountAccount_Variant0()
        {
#line 61
  this.Lookup_AccountAccount("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "999899126000", "1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("lookup - /account/<account>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "FROJFIFQRARWEHOL6GR3MBFCDJY76CPF3UY55HM3PCK42AD5HA5SKKXLLA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "4992999999993000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        public virtual void Lookup_AccountAccount_Variant1()
        {
#line 61
  this.Lookup_AccountAccount("1", "FROJFIFQRARWEHOL6GR3MBFCDJY76CPF3UY55HM3PCK42AD5HA5SKKXLLA", "4992999999993000", "0", ((string[])(null)));
#line hidden
        }
        
        public virtual void Rewind_AccountsAccount_IdRoundRound(string indexer, string account, string round, string μalgos, string num, string asset_Id, string asset_Amount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("account", account);
            argumentsOfScenario.Add("round", round);
            argumentsOfScenario.Add("μalgos", μalgos);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("asset-amount", asset_Amount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("rewind - /accounts/{account-id}?round=<round>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 75
    testRunner.When(string.Format("I use {0} to lookup account \"{1}\" at round {2}", indexer, account, round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
    testRunner.Then(string.Format("The account has {0} μalgos and {1} assets, {2} has {3}", μalgos, num, asset_Id, asset_Amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "351")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999899126000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "999931337000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant0()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "351", "999899126000", "1", "9", "999931337000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999899126000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "999931337000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant1()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "30", "999899126000", "1", "9", "999931337000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "29")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999898989000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "999900000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant2()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "29", "999898989000", "1", "9", "999900000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999998990000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "999900000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant3()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "27", "999998990000", "1", "9", "999900000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "25")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999998991000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "1000000000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant4()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "25", "999998991000", "1", "9", "1000000000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999999992000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "1000000000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant5()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "21", "999999992000", "1", "9", "1000000000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "19")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999998995000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "1000000000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant6()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "19", "999998995000", "1", "9", "1000000000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "17")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999998995000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "999999000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant7()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "17", "999998995000", "1", "9", "999999000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999998996000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "1000000000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant8()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "15", "999998996000", "1", "9", "1000000000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999999997000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "1000000000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant9()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "11", "999999997000", "1", "9", "1000000000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999899998000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "1000000000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant10()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "9", "999899998000", "1", "9", "1000000000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "999999999000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "1000000000000")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant11()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "6", "999999999000", "1", "9", "1000000000000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "1000000000000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "0")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant12()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "4", "1000000000000", "1", "9", "0", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "0")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant13()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "2", "0", "1", "9", "0", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("rewind - /accounts/{account-id}?round=<round>: Variant 14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:μalgos", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-amount", "0")]
        public virtual void Rewind_AccountsAccount_IdRoundRound_Variant14()
        {
#line 74
  this.Rewind_AccountsAccount_IdRoundRound("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "1", "0", "1", "9", "0", ((string[])(null)));
#line hidden
        }
        
        public virtual void Lookup_AssetsAsset_Id(string indexer, string asset_Id, string name, string units, string creator, string decimals, string default_Frozen, string total, string clawback, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("units", units);
            argumentsOfScenario.Add("creator", creator);
            argumentsOfScenario.Add("decimals", decimals);
            argumentsOfScenario.Add("default-frozen", default_Frozen);
            argumentsOfScenario.Add("total", total);
            argumentsOfScenario.Add("clawback", clawback);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("lookup - /assets/<asset-id>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 100
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 101
    testRunner.When(string.Format("I use {0} to lookup asset {1}", indexer, asset_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
    testRunner.Then(string.Format("The asset found has: \"{0}\", \"{1}\", \"{2}\", {3}, \"{4}\", {5}, \"{6}\"", name, units, creator, decimals, default_Frozen, total, clawback), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("lookup - /assets/<asset-id>: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "bogocoin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:units", "bogo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:decimals", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:default-frozen", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:total", "1000000000000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:clawback", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        public virtual void Lookup_AssetsAsset_Id_1()
        {
#line 100
  this.Lookup_AssetsAsset_Id("1", "9", "bogocoin", "bogo", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "0", "false", "1000000000000", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", ((string[])(null)));
#line hidden
        }
        
        public virtual void Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit(string indexer, string asset_Id, string currency_Gt, string currency_Lt, string limit, string num_Accounts, string account, string is_Frozen, string amount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("currency-gt", currency_Gt);
            argumentsOfScenario.Add("currency-lt", currency_Lt);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("num-accounts", num_Accounts);
            argumentsOfScenario.Add("account", account);
            argumentsOfScenario.Add("is-frozen", is_Frozen);
            argumentsOfScenario.Add("amount", amount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("balances - /assets/<asset-id>/balances?gt=<currency-gt>&lt=<currency-lt>&limit=<l" +
                    "imit>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 113
    testRunner.When(string.Format("I use {0} to lookup asset balances for {1} with {2}, {3}, {4} and token \"\"", indexer, asset_Id, currency_Gt, currency_Lt, limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
    testRunner.Then(string.Format("There are {0} with the asset, the first is \"{1}\" has \"{2}\" and {3}", num_Accounts, account, is_Frozen, amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("balances - /assets/<asset-id>/balances?gt=<currency-gt>&lt=<currency-lt>&limit=<l" +
            "imit>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num-accounts", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:is-frozen", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "999931337000")]
        public virtual void Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit_Variant0()
        {
#line 112
  this.Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit("1", "9", "0", "0", "0", "2", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "false", "999931337000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("balances - /assets/<asset-id>/balances?gt=<currency-gt>&lt=<currency-lt>&limit=<l" +
            "imit>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num-accounts", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:is-frozen", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "999931337000")]
        public virtual void Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit_Variant1()
        {
#line 112
  this.Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit("1", "9", "0", "0", "1", "1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "false", "999931337000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("balances - /assets/<asset-id>/balances?gt=<currency-gt>&lt=<currency-lt>&limit=<l" +
            "imit>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num-accounts", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:is-frozen", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "999931337000")]
        public virtual void Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit_Variant2()
        {
#line 112
  this.Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit("1", "9", "0", "0", "1", "1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "false", "999931337000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("balances - /assets/<asset-id>/balances?gt=<currency-gt>&lt=<currency-lt>&limit=<l" +
            "imit>: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "68663000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num-accounts", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:is-frozen", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "999931337000")]
        public virtual void Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit_Variant3()
        {
#line 112
  this.Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit("1", "9", "68663000", "0", "0", "1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "false", "999931337000", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("balances - /assets/<asset-id>/balances?gt=<currency-gt>&lt=<currency-lt>&limit=<l" +
            "imit>: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "68663001")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num-accounts", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:is-frozen", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "68663000")]
        public virtual void Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit_Variant4()
        {
#line 112
  this.Balances_AssetsAsset_IdBalancesGtCurrency_GtLtCurrency_LtLimitLimit("1", "9", "0", "68663001", "0", "1", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA", "false", "68663000", ((string[])(null)));
#line hidden
        }
        
        public virtual void AssetsAsset_IdBalancesNextToken(string indexer, string asset_Id, string currency_Gt, string currency_Lt, string limit, string num_Accounts, string account, string is_Frozen, string amount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("currency-gt", currency_Gt);
            argumentsOfScenario.Add("currency-lt", currency_Lt);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("num-accounts", num_Accounts);
            argumentsOfScenario.Add("account", account);
            argumentsOfScenario.Add("is-frozen", is_Frozen);
            argumentsOfScenario.Add("amount", amount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/assets/{asset-id}/balances?next=token", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 131
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 132
    testRunner.When(string.Format("I use {0} to lookup asset balances for {1} with {2}, {3}, {4} and token \"\"", indexer, asset_Id, currency_Gt, currency_Lt, limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
    testRunner.And(string.Format("I get the next page using {0} to lookup asset balances for {1} with {2}, {3}, {4}" +
                            "", indexer, asset_Id, currency_Gt, currency_Lt, limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
    testRunner.Then(string.Format("There are {0} with the asset, the first is \"{1}\" has \"{2}\" and {3}", num_Accounts, account, is_Frozen, amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets/{asset-id}/balances?next=token: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num-accounts", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:is-frozen", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "68663000")]
        public virtual void AssetsAsset_IdBalancesNextToken_1()
        {
#line 131
  this.AssetsAsset_IdBalancesNextToken("1", "9", "0", "0", "1", "1", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA", "false", "68663000", ((string[])(null)));
#line hidden
        }
        
        public virtual void General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt(string indexer, string asset_Id, string limit, string currency_Gt, string currency_Lt, string num, string pending_Rewards, string rewards_Base, string rewards, string without_Rewards, string address, string amount, string status, string type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("currency-gt", currency_Gt);
            argumentsOfScenario.Add("currency-lt", currency_Lt);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("pending-rewards", pending_Rewards);
            argumentsOfScenario.Add("rewards-base", rewards_Base);
            argumentsOfScenario.Add("rewards", rewards);
            argumentsOfScenario.Add("without-rewards", without_Rewards);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("general - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<curren" +
                    "cy-lt>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 148
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 149
    testRunner.When(string.Format("I use {0} to search for an account with {1}, {2}, {3}, {4} and token \"\"", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
    testRunner.Then(string.Format("There are {0}, the first has {1}, {2}, {3}, {4}, \"{5}\", {6}, \"{7}\", \"{8}\"", num, pending_Rewards, rewards_Base, rewards, without_Rewards, address, amount, status, type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("general - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<curren" +
            "cy-lt>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "A5QNF7MATDBZHXVYROXVZ6WTWMMDGX5RPEUCYAQEINOS3LQUW7NQGUJ4OI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "lsig")]
        public virtual void General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant0()
        {
#line 148
  this.General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "0", "0", "0", "0", "32", "0", "0", "0", "0", "A5QNF7MATDBZHXVYROXVZ6WTWMMDGX5RPEUCYAQEINOS3LQUW7NQGUJ4OI", "0", "Offline", "lsig", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("general - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<curren" +
            "cy-lt>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "A5QNF7MATDBZHXVYROXVZ6WTWMMDGX5RPEUCYAQEINOS3LQUW7NQGUJ4OI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "lsig")]
        public virtual void General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant1()
        {
#line 148
  this.General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "0", "10", "0", "0", "10", "0", "0", "0", "0", "A5QNF7MATDBZHXVYROXVZ6WTWMMDGX5RPEUCYAQEINOS3LQUW7NQGUJ4OI", "0", "Offline", "lsig", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("general - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<curren" +
            "cy-lt>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "68663000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "999899126000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "999899126000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "sig")]
        public virtual void General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant2()
        {
#line 148
  this.General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "9", "0", "68663000", "0", "1", "0", "0", "0", "999899126000", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "999899126000", "Offline", "sig", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("general - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<curren" +
            "cy-lt>: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "68663001")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "998000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "998000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "lsig")]
        public virtual void General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant3()
        {
#line 148
  this.General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "9", "0", "0", "68663001", "1", "0", "0", "0", "998000", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA", "998000", "Offline", "lsig", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("general - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<curren" +
            "cy-lt>: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "798999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "799001")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "799000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "RRHDAJKO5HQBLHPCVK6K7U54LENDIP2JKM3RNRYX2G254VUXBRQD35CK4E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "799000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "msig")]
        public virtual void General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant4()
        {
#line 148
  this.General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "0", "0", "798999", "799001", "1", "0", "0", "0", "799000", "RRHDAJKO5HQBLHPCVK6K7U54LENDIP2JKM3RNRYX2G254VUXBRQD35CK4E", "799000", "Offline", "msig", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("general - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<curren" +
            "cy-lt>: Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "68663001")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "998000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "998000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "lsig")]
        public virtual void General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant5()
        {
#line 148
  this.General_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("3", "9", "0", "1", "68663001", "1", "0", "0", "0", "998000", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA", "998000", "Offline", "lsig", ((string[])(null)));
#line hidden
        }
        
        public virtual void Online_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt(string indexer, string asset_Id, string limit, string currency_Gt, string currency_Lt, string address, string key_Dilution, string first_Valid, string last_Valid, string vote_Key, string selection_Key, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("currency-gt", currency_Gt);
            argumentsOfScenario.Add("currency-lt", currency_Lt);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("key-dilution", key_Dilution);
            argumentsOfScenario.Add("first-valid", first_Valid);
            argumentsOfScenario.Add("last-valid", last_Valid);
            argumentsOfScenario.Add("vote-key", vote_Key);
            argumentsOfScenario.Add("selection-key", selection_Key);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("online - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currenc" +
                    "y-lt>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 169
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 170
    testRunner.When(string.Format("I use {0} to search for an account with {1}, {2}, {3}, {4} and token \"\"", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 171
    testRunner.Then(string.Format("The first account is online and has \"{0}\", {1}, {2}, {3}, \"{4}\", \"{5}\"", address, key_Dilution, first_Valid, last_Valid, vote_Key, selection_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("online - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currenc" +
            "y-lt>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "998999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "999001")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "NNFTUMXU5EMDOSFRGQ55TOGOJIS7P7POIDHJTQNQUBVVYJ6GCIPHOMAMQE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:key-dilution", "10000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:first-valid", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:last-valid", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:vote-key", "h0wDwh1yhWiWu0S79wEiQaWXnNLCMjcce5MPeWPRQ/Q=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:selection-key", "Ob0jBcHd0uh6nMjls6bOHlissWvPlINGiREJ+gaEOSg=")]
        public virtual void Online_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant0()
        {
#line 169
  this.Online_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "0", "0", "998999", "999001", "NNFTUMXU5EMDOSFRGQ55TOGOJIS7P7POIDHJTQNQUBVVYJ6GCIPHOMAMQE", "10000", "0", "100", "h0wDwh1yhWiWu0S79wEiQaWXnNLCMjcce5MPeWPRQ/Q=", "Ob0jBcHd0uh6nMjls6bOHlissWvPlINGiREJ+gaEOSg=", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("online - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currenc" +
            "y-lt>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "4992999999992999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "BYP7VVRIBDOOFKEYICNYIM43S6DW7RIZC73XNMKF3KT5YUITDDMH3W5D5Q")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:key-dilution", "10000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:first-valid", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:last-valid", "3000000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:vote-key", "9OO2S7ikfESeDZg8Z9mrzdN2Lh52UBSVH9uD7XqQHhs=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:selection-key", "BkTjDJB2Su5Fi9uwJTODkxpEjrhCJSYtF10m0ee6THU=")]
        public virtual void Online_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant1()
        {
#line 169
  this.Online_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "0", "0", "4992999999992999", "0", "BYP7VVRIBDOOFKEYICNYIM43S6DW7RIZC73XNMKF3KT5YUITDDMH3W5D5Q", "10000", "0", "3000000", "9OO2S7ikfESeDZg8Z9mrzdN2Lh52UBSVH9uD7XqQHhs=", "BkTjDJB2Su5Fi9uwJTODkxpEjrhCJSYtF10m0ee6THU=", ((string[])(null)));
#line hidden
        }
        
        public virtual void Paging_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt(string indexer, string asset_Id, string limit, string currency_Gt, string currency_Lt, string num, string pending_Rewards, string rewards_Base, string rewards, string without_Rewards, string address, string amount, string status, string type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("currency-gt", currency_Gt);
            argumentsOfScenario.Add("currency-lt", currency_Lt);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("pending-rewards", pending_Rewards);
            argumentsOfScenario.Add("rewards-base", rewards_Base);
            argumentsOfScenario.Add("rewards", rewards);
            argumentsOfScenario.Add("without-rewards", without_Rewards);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("paging - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currenc" +
                    "y-lt>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 185
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 186
    testRunner.When(string.Format("I use {0} to search for an account with {1}, {2}, {3}, {4} and token \"\"", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 187
    testRunner.Then(string.Format("I get the next page using {0} to search for an account with {1}, {2}, {3} and {4}" +
                            "", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 188
    testRunner.Then(string.Format("There are {0}, the first has {1}, {2}, {3}, {4}, \"{5}\", {6}, \"{7}\", \"{8}\"", num, pending_Rewards, rewards_Base, rewards, without_Rewards, address, amount, status, type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("paging - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currenc" +
            "y-lt>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "149234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "A7NMWS3NT3IUDMLVO26ULGXGIIOUQ3ND2TXSER6EBGRZNOBOUIQXHIBGDE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "149234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "NotParticipating")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "")]
        public virtual void Paging_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant0()
        {
#line 185
  this.Paging_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "0", "1", "0", "0", "1", "0", "0", "0", "149234", "A7NMWS3NT3IUDMLVO26ULGXGIIOUQ3ND2TXSER6EBGRZNOBOUIQXHIBGDE", "149234", "NotParticipating", "", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("paging - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currenc" +
            "y-lt>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "999899996766")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "LQU5S7HMDXLQUQD5BKIMPPZYK7LYXPC5AVGIWNVNTBVQHL3GCXFVXZFJ3A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "999899996766")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "sig")]
        public virtual void Paging_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant1()
        {
#line 185
  this.Paging_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "0", "10", "0", "0", "10", "0", "0", "0", "999899996766", "LQU5S7HMDXLQUQD5BKIMPPZYK7LYXPC5AVGIWNVNTBVQHL3GCXFVXZFJ3A", "999899996766", "Offline", "sig", ((string[])(null)));
#line hidden
        }
        
        public virtual void Paging6Times_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt(string indexer, string asset_Id, string limit, string currency_Gt, string currency_Lt, string num, string pending_Rewards, string rewards_Base, string rewards, string without_Rewards, string address, string amount, string status, string type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("currency-gt", currency_Gt);
            argumentsOfScenario.Add("currency-lt", currency_Lt);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("pending-rewards", pending_Rewards);
            argumentsOfScenario.Add("rewards-base", rewards_Base);
            argumentsOfScenario.Add("rewards", rewards);
            argumentsOfScenario.Add("without-rewards", without_Rewards);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("paging 6 times - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=" +
                    "<currency-lt>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 201
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 202
    testRunner.When(string.Format("I use {0} to search for an account with {1}, {2}, {3}, {4} and token \"\"", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 203
    testRunner.Then(string.Format("I get the next page using {0} to search for an account with {1}, {2}, {3} and {4}" +
                            "", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 204
    testRunner.Then(string.Format("I get the next page using {0} to search for an account with {1}, {2}, {3} and {4}" +
                            "", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
    testRunner.Then(string.Format("I get the next page using {0} to search for an account with {1}, {2}, {3} and {4}" +
                            "", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 206
    testRunner.Then(string.Format("I get the next page using {0} to search for an account with {1}, {2}, {3} and {4}" +
                            "", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 207
    testRunner.Then(string.Format("I get the next page using {0} to search for an account with {1}, {2}, {3} and {4}" +
                            "", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
    testRunner.Then(string.Format("I get the next page using {0} to search for an account with {1}, {2}, {3} and {4}" +
                            "", indexer, asset_Id, limit, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
    testRunner.Then(string.Format("There are {0}, the first has {1}, {2}, {3}, {4}, \"{5}\", {6}, \"{7}\", \"{8}\"", num, pending_Rewards, rewards_Base, rewards, without_Rewards, address, amount, status, type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("paging 6 times - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=" +
            "<currency-lt>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "GP44P6YCVSRK4IYIEZYDYO5POY3QO5VTATZIMRI6DFLMO2EPK7GBBNQRCM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "lsig")]
        public virtual void Paging6Times_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant0()
        {
#line 201
  this.Paging6Times_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "0", "1", "0", "0", "1", "0", "0", "0", "0", "GP44P6YCVSRK4IYIEZYDYO5POY3QO5VTATZIMRI6DFLMO2EPK7GBBNQRCM", "0", "Offline", "lsig", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("paging 6 times - /accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=" +
            "<currency-lt>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:pending-rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards-base", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rewards", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:without-rewards", "999000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "NNFTUMXU5EMDOSFRGQ55TOGOJIS7P7POIDHJTQNQUBVVYJ6GCIPHOMAMQE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amount", "999000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:status", "Online")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:type", "sig")]
        public virtual void Paging6Times_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt_Variant1()
        {
#line 201
  this.Paging6Times_AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_Lt("1", "0", "2", "0", "0", "2", "0", "0", "0", "999000", "NNFTUMXU5EMDOSFRGQ55TOGOJIS7P7POIDHJTQNQUBVVYJ6GCIPHOMAMQE", "999000", "Online", "sig", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsNote_Prefix(string indexer, string note_Prefix, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("note-prefix", note_Prefix);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?note-prefix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 221
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 222
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"{1}\", \"\", \"\", \"\", 0, 0, 0, 0, \"\", \"" +
                            "\", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, note_Prefix), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 223
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?note-prefix: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:note-prefix", "XQ==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "U2KNU7B55LZU6SWX66VHIZMJT4OX6YMNCIKBLV4BLYVTBCU3ZW2A")]
        public virtual void TransactionsNote_Prefix_Variant0()
        {
#line 221
  this.TransactionsNote_Prefix("1", "XQ==", "2", "U2KNU7B55LZU6SWX66VHIZMJT4OX6YMNCIKBLV4BLYVTBCU3ZW2A", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?note-prefix: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:note-prefix", "VA==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "IMFJQCCF5T2DOVSKHP2NHDKV5A2VGVIW24LNQUBDOH33UMIE545Q")]
        public virtual void TransactionsNote_Prefix_Variant1()
        {
#line 221
  this.TransactionsNote_Prefix("1", "VA==", "3", "IMFJQCCF5T2DOVSKHP2NHDKV5A2VGVIW24LNQUBDOH33UMIE545Q", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?note-prefix: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:note-prefix", "1111")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "")]
        public virtual void TransactionsNote_Prefix_Variant2()
        {
#line 221
  this.TransactionsNote_Prefix("1", "1111", "0", "", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsTx_TypeTx_Type(string indexer, string tx_Type, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("tx-type", tx_Type);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?tx-type=<tx-type>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 232
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 233
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"{1}\", \"\", \"\", 0, 0, 0, 0, \"\", \"" +
                            "\", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, tx_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 234
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 235
    testRunner.And(string.Format("Every transaction has tx-type \"{0}\"", tx_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?tx-type=<tx-type>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:tx-type", "pay")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "41")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsTx_TypeTx_Type_Variant0()
        {
#line 232
  this.TransactionsTx_TypeTx_Type("1", "pay", "41", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?tx-type=<tx-type>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:tx-type", "keyreg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "HG3DLU47GVRCLIG3SIHM6TTWINUN7VOKKAJWZRYZQA4NDO7PNXMA")]
        public virtual void TransactionsTx_TypeTx_Type_Variant1()
        {
#line 232
  this.TransactionsTx_TypeTx_Type("1", "keyreg", "1", "HG3DLU47GVRCLIG3SIHM6TTWINUN7VOKKAJWZRYZQA4NDO7PNXMA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?tx-type=<tx-type>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:tx-type", "acfg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "KGG5ZGQQ57Y2ZDH5CFRYMJODPJ4TVIQBAPKT3HK3PIS6A6K4T5GQ")]
        public virtual void TransactionsTx_TypeTx_Type_Variant2()
        {
#line 232
  this.TransactionsTx_TypeTx_Type("1", "acfg", "1", "KGG5ZGQQ57Y2ZDH5CFRYMJODPJ4TVIQBAPKT3HK3PIS6A6K4T5GQ", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?tx-type=<tx-type>: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:tx-type", "axfer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "IIWBLLEXCFDQQHENIU2JBXSFDNNHLO5C2M5PE3UIHQ3YXN2TWRUA")]
        public virtual void TransactionsTx_TypeTx_Type_Variant3()
        {
#line 232
  this.TransactionsTx_TypeTx_Type("1", "axfer", "6", "IIWBLLEXCFDQQHENIU2JBXSFDNNHLO5C2M5PE3UIHQ3YXN2TWRUA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?tx-type=<tx-type>: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:tx-type", "afrz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "")]
        public virtual void TransactionsTx_TypeTx_Type_Variant4()
        {
#line 232
  this.TransactionsTx_TypeTx_Type("1", "afrz", "0", "", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsSig_TypeSig_Type(string indexer, string sig_Type, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("sig-type", sig_Type);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?sig-type=<sig-type>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 246
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 247
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"{1}\", \"\", 0, 0, 0, 0, \"\", \"" +
                            "\", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, sig_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 248
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 249
    testRunner.And(string.Format("Every transaction has sig-type \"{0}\"", sig_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?sig-type=<sig-type>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sig-type", "sig")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "25")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsSig_TypeSig_Type_Variant0()
        {
#line 246
  this.TransactionsSig_TypeSig_Type("1", "sig", "25", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?sig-type=<sig-type>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sig-type", "lsig")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "24")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "SPRRY5NZETQFP3C7MHEDURQRUUC5JVESSRXRXVJAHENZ6OJJKMXQ")]
        public virtual void TransactionsSig_TypeSig_Type_Variant1()
        {
#line 246
  this.TransactionsSig_TypeSig_Type("1", "lsig", "24", "SPRRY5NZETQFP3C7MHEDURQRUUC5JVESSRXRXVJAHENZ6OJJKMXQ", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?sig-type=<sig-type>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sig-type", "msig")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "")]
        public virtual void TransactionsSig_TypeSig_Type_Variant2()
        {
#line 246
  this.TransactionsSig_TypeSig_Type("1", "msig", "0", "", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsTx_IdTxid(string indexer, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?tx-id=<txid>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 258
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 259
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"{1}\", 0, 0, 0, 0, \"\", \"" +
                            "\", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 260
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?tx-id=<txid>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "DN7MBMCL5JQ3PFUQS7TMX5AH4EEKOBJVDUF4TCV6WERATKFLQF4M")]
        public virtual void TransactionsTx_IdTxid_Variant0()
        {
#line 258
  this.TransactionsTx_IdTxid("1", "0", "DN7MBMCL5JQ3PFUQS7TMX5AH4EEKOBJVDUF4TCV6WERATKFLQF4M", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?tx-id=<txid>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsTx_IdTxid_Variant1()
        {
#line 258
  this.TransactionsTx_IdTxid("1", "1", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?tx-id=<txid>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "SPRRY5NZETQFP3C7MHEDURQRUUC5JVESSRXRXVJAHENZ6OJJKMXQ")]
        public virtual void TransactionsTx_IdTxid_Variant2()
        {
#line 258
  this.TransactionsTx_IdTxid("1", "1", "SPRRY5NZETQFP3C7MHEDURQRUUC5JVESSRXRXVJAHENZ6OJJKMXQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsRoundRound(string indexer, string round, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("round", round);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?round=<round>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 269
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 270
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"\", {1}, 0, 0, 0, \"\", \"\"" +
                            ", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 271
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 272
    testRunner.And(string.Format("Every transaction has round {0}", round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?round=<round>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "TF5YEFGB7AQT4ZXVGBEY76TGV7D2QF4HMSGAVGUJE764ZIGXS3NQ")]
        public virtual void TransactionsRoundRound_Variant0()
        {
#line 269
  this.TransactionsRoundRound("1", "10", "2", "TF5YEFGB7AQT4ZXVGBEY76TGV7D2QF4HMSGAVGUJE764ZIGXS3NQ", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?round=<round>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "DWSC3DPKFU7TIPMOVJZM25XYBUNJQASGVDYS7QREO33UEA6FYSNA")]
        public virtual void TransactionsRoundRound_Variant1()
        {
#line 269
  this.TransactionsRoundRound("1", "22", "3", "DWSC3DPKFU7TIPMOVJZM25XYBUNJQASGVDYS7QREO33UEA6FYSNA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?round=<round>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:round", "30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "5UWAFFNPPECDJHAYYRRLE3WIWGO2WVH4LZMPLVQBS4E76UERRATA")]
        public virtual void TransactionsRoundRound_Variant2()
        {
#line 269
  this.TransactionsRoundRound("1", "30", "2", "5UWAFFNPPECDJHAYYRRLE3WIWGO2WVH4LZMPLVQBS4E76UERRATA", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsMin_RoundMin_Round(string indexer, string min_Round, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("min-round", min_Round);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?min-round=<min-round>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 281
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 282
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"\", 0, {1}, 0, 0, \"\", \"\"" +
                            ", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, min_Round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 283
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 284
    testRunner.And(string.Format("Every transaction has round >= {0}", min_Round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?min-round=<min-round>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:min-round", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "25")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "TF5YEFGB7AQT4ZXVGBEY76TGV7D2QF4HMSGAVGUJE764ZIGXS3NQ")]
        public virtual void TransactionsMin_RoundMin_Round_Variant0()
        {
#line 281
  this.TransactionsMin_RoundMin_Round("1", "10", "25", "TF5YEFGB7AQT4ZXVGBEY76TGV7D2QF4HMSGAVGUJE764ZIGXS3NQ", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?min-round=<min-round>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:min-round", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "DWSC3DPKFU7TIPMOVJZM25XYBUNJQASGVDYS7QREO33UEA6FYSNA")]
        public virtual void TransactionsMin_RoundMin_Round_Variant1()
        {
#line 281
  this.TransactionsMin_RoundMin_Round("1", "22", "10", "DWSC3DPKFU7TIPMOVJZM25XYBUNJQASGVDYS7QREO33UEA6FYSNA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?min-round=<min-round>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:min-round", "30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "5UWAFFNPPECDJHAYYRRLE3WIWGO2WVH4LZMPLVQBS4E76UERRATA")]
        public virtual void TransactionsMin_RoundMin_Round_Variant2()
        {
#line 281
  this.TransactionsMin_RoundMin_Round("1", "30", "2", "5UWAFFNPPECDJHAYYRRLE3WIWGO2WVH4LZMPLVQBS4E76UERRATA", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsMax_RoundMax_Round(string indexer, string max_Round, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("max-round", max_Round);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?max-round=<max-round>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 293
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 294
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"\", 0, 0, {1}, 0, \"\", \"\"" +
                            ", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, max_Round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 295
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 296
    testRunner.And("Every transaction has round <= <max-round>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?max-round=<max-round>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:max-round", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "26")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsMax_RoundMax_Round_Variant0()
        {
#line 293
  this.TransactionsMax_RoundMax_Round("1", "10", "26", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?max-round=<max-round>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:max-round", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "42")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsMax_RoundMax_Round_Variant1()
        {
#line 293
  this.TransactionsMax_RoundMax_Round("1", "22", "42", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?max-round=<max-round>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:max-round", "30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "49")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsMax_RoundMax_Round_Variant2()
        {
#line 293
  this.TransactionsMax_RoundMax_Round("1", "30", "49", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsAsset_IdAsset_Id(string indexer, string asset_Id, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?asset-id=<asset-id>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 305
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 306
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"\", 0, 0, 0, {1}, \"\", \"\"" +
                            ", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, asset_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 307
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 308
    testRunner.And(string.Format("Every transaction works with asset-id {0}", asset_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?asset-id=<asset-id>: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "KGG5ZGQQ57Y2ZDH5CFRYMJODPJ4TVIQBAPKT3HK3PIS6A6K4T5GQ")]
        public virtual void TransactionsAsset_IdAsset_Id_1()
        {
#line 305
  this.TransactionsAsset_IdAsset_Id("1", "9", "7", "KGG5ZGQQ57Y2ZDH5CFRYMJODPJ4TVIQBAPKT3HK3PIS6A6K4T5GQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsBefore_TimeBefore(string indexer, string before, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("before", before);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?before-time=<before>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 315
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 316
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"\", 0, 0, 0, 0, \"{1}\", \"" +
                            "\", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, before), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 317
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 318
    testRunner.And(string.Format("Every transaction is older than \"{0}\"", before), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?before-time=<before>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:before", "2020-03-31T19:47:49Z")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "")]
        public virtual void TransactionsBefore_TimeBefore_Variant0()
        {
#line 315
  this.TransactionsBefore_TimeBefore("1", "2020-03-31T19:47:49Z", "0", "", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?before-time=<before>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:before", "2020-03-31T19:48:49Z")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "35")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsBefore_TimeBefore_Variant1()
        {
#line 315
  this.TransactionsBefore_TimeBefore("1", "2020-03-31T19:48:49Z", "35", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?before-time=<before>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:before", "2021-03-31T19:47:49Z")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "49")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsBefore_TimeBefore_Variant2()
        {
#line 315
  this.TransactionsBefore_TimeBefore("1", "2021-03-31T19:47:49Z", "49", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsAfter_TimeAfter(string indexer, string after, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("after", after);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?after-time=<after>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 327
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 328
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"\", 0, 0, 0, 0, \"\", \"{1}" +
                            "\", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, after), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 329
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 330
    testRunner.And(string.Format("Every transaction is newer than \"{0}\"", after), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?after-time=<after>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:after", "2019-01-01T01:01:01Z")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "49")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsAfter_TimeAfter_Variant0()
        {
#line 327
  this.TransactionsAfter_TimeAfter("1", "2019-01-01T01:01:01Z", "49", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?after-time=<after>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:after", "2020-03-31T19:48:49Z")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "GLEDN6PCACB6WI72ABZ34CEAIXZCZQ7HLVZI7SLWIR46JHUHXQJA")]
        public virtual void TransactionsAfter_TimeAfter_Variant1()
        {
#line 327
  this.TransactionsAfter_TimeAfter("1", "2020-03-31T19:48:49Z", "14", "GLEDN6PCACB6WI72ABZ34CEAIXZCZQ7HLVZI7SLWIR46JHUHXQJA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?after-time=<after>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:after", "2029-01-01T01:01:01Z")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "")]
        public virtual void TransactionsAfter_TimeAfter_Variant2()
        {
#line 327
  this.TransactionsAfter_TimeAfter("1", "2029-01-01T01:01:01Z", "0", "", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsCurrency_GtCurrency_GtCurrency_LtCurrency_Lt(string indexer, string currency_Gt, string currency_Lt, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("currency-gt", currency_Gt);
            argumentsOfScenario.Add("currency-lt", currency_Lt);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?currency-gt=<currency-gt>&currency-lt=<currency-lt>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 339
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 340
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"\", 0, 0, 0, 0, \"\", \"\", " +
                            "{1}, {2}, \"\", \"\", \"\" and token \"\"", indexer, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 341
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 342
    testRunner.And(string.Format("Every transaction moves between {0} and {1} currency", currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?currency-gt=<currency-gt>&currency-lt=<currency-lt>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "TK3KPYVH7CCDMGG4TP66HGQTJKA2ETCECEBEQ4QXFTLQZZR6XVMA")]
        public virtual void TransactionsCurrency_GtCurrency_GtCurrency_LtCurrency_Lt_Variant0()
        {
#line 339
  this.TransactionsCurrency_GtCurrency_GtCurrency_LtCurrency_Lt("1", "0", "10", "2", "TK3KPYVH7CCDMGG4TP66HGQTJKA2ETCECEBEQ4QXFTLQZZR6XVMA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?currency-gt=<currency-gt>&currency-lt=<currency-lt>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA")]
        public virtual void TransactionsCurrency_GtCurrency_GtCurrency_LtCurrency_Lt_Variant1()
        {
#line 339
  this.TransactionsCurrency_GtCurrency_GtCurrency_LtCurrency_Lt("1", "1", "0", "34", "3LC3FNFWZVKLOSQQLKTTAPHHWKKHEVJDWBVIWAMYP7MNQQHZP5BA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?currency-gt=<currency-gt>&currency-lt=<currency-lt>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "10000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "1000000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "VUOIU472GVEML5AS22TP5GSBIEITZFRZWVXVQQ7UD33QR7A5K3ZA")]
        public virtual void TransactionsCurrency_GtCurrency_GtCurrency_LtCurrency_Lt_Variant2()
        {
#line 339
  this.TransactionsCurrency_GtCurrency_GtCurrency_LtCurrency_Lt("1", "10000", "1000000", "2", "VUOIU472GVEML5AS22TP5GSBIEITZFRZWVXVQQ7UD33QR7A5K3ZA", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsAsset_IdAsset_IdCurrency_GtCurrency_GtCurrency_LtCurrency_Lt(string indexer, string asset_Id, string currency_Gt, string currency_Lt, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("currency-gt", currency_Gt);
            argumentsOfScenario.Add("currency-lt", currency_Lt);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?asset-id=<asset-id>&currency-gt=<currency-gt>&currency-lt=<currency" +
                    "-lt>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 351
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 352
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"\", 0, 0, 0, {1}, \"\", \"\"" +
                            ", {2}, {3}, \"\", \"\", \"\" and token \"\"", indexer, asset_Id, currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 353
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 354
    testRunner.And(string.Format("Every transaction moves between {0} and {1} currency", currency_Gt, currency_Lt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?asset-id=<asset-id>&currency-gt=<currency-gt>&currency-lt=<currency" +
            "-lt>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "E36LBI7IN5OJGEFWKPCEQ2L436DFYHKAMEMASZXEVMP64F76HVNA")]
        public virtual void TransactionsAsset_IdAsset_IdCurrency_GtCurrency_GtCurrency_LtCurrency_Lt_Variant0()
        {
#line 351
  this.TransactionsAsset_IdAsset_IdCurrency_GtCurrency_GtCurrency_LtCurrency_Lt("1", "9", "1", "0", "3", "E36LBI7IN5OJGEFWKPCEQ2L436DFYHKAMEMASZXEVMP64F76HVNA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?asset-id=<asset-id>&currency-gt=<currency-gt>&currency-lt=<currency" +
            "-lt>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "100000000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "E36LBI7IN5OJGEFWKPCEQ2L436DFYHKAMEMASZXEVMP64F76HVNA")]
        public virtual void TransactionsAsset_IdAsset_IdCurrency_GtCurrency_GtCurrency_LtCurrency_Lt_Variant1()
        {
#line 351
  this.TransactionsAsset_IdAsset_IdCurrency_GtCurrency_GtCurrency_LtCurrency_Lt("1", "9", "0", "100000000", "2", "E36LBI7IN5OJGEFWKPCEQ2L436DFYHKAMEMASZXEVMP64F76HVNA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?asset-id=<asset-id>&currency-gt=<currency-gt>&currency-lt=<currency" +
            "-lt>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-gt", "1000000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:currency-lt", "100000000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA")]
        public virtual void TransactionsAsset_IdAsset_IdCurrency_GtCurrency_GtCurrency_LtCurrency_Lt_Variant2()
        {
#line 351
  this.TransactionsAsset_IdAsset_IdCurrency_GtCurrency_GtCurrency_LtCurrency_Lt("1", "9", "1000000", "100000000", "1", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA", ((string[])(null)));
#line hidden
        }
        
        public virtual void AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To(string indexer, string address, string address_Role, string exclude_Close_To, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("address-role", address_Role);
            argumentsOfScenario.Add("exclude-close-to", exclude_Close_To);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("account filter /transactions?address=<address>&address-role=<address-role>&exclud" +
                    "e-close-to=<exclude-close-to>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 363
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 364
    testRunner.When(string.Format("I use {0} to search for transactions with 0, \"\", \"\", \"\", \"\", 0, 0, 0, 0, \"\", \"\", " +
                            "0, 0, \"{1}\", \"{2}\", \"{3}\" and token \"\"", indexer, address, address_Role, exclude_Close_To), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 365
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("account filter /transactions?address=<address>&address-role=<address-role>&exclud" +
            "e-close-to=<exclude-close-to>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address-role", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:exclude-close-to", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA")]
        public virtual void AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To_Variant0()
        {
#line 363
  this.AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To("1", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA", "", "", "4", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("account filter /transactions?address=<address>&address-role=<address-role>&exclud" +
            "e-close-to=<exclude-close-to>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address-role", "sender")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:exclude-close-to", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA")]
        public virtual void AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To_Variant1()
        {
#line 363
  this.AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To("1", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA", "sender", "", "2", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("account filter /transactions?address=<address>&address-role=<address-role>&exclud" +
            "e-close-to=<exclude-close-to>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address-role", "receiver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:exclude-close-to", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "53CGXAKDKMPOXQHMFK5CFZAYP3KJLD3LMG3DFZBVIT6XR7O3ATVA")]
        public virtual void AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To_Variant2()
        {
#line 363
  this.AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To("1", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA", "receiver", "", "3", "53CGXAKDKMPOXQHMFK5CFZAYP3KJLD3LMG3DFZBVIT6XR7O3ATVA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("account filter /transactions?address=<address>&address-role=<address-role>&exclud" +
            "e-close-to=<exclude-close-to>: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address-role", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:exclude-close-to", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA")]
        public virtual void AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To_Variant3()
        {
#line 363
  this.AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "", "", "13", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("account filter /transactions?address=<address>&address-role=<address-role>&exclud" +
            "e-close-to=<exclude-close-to>: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address-role", "receiver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:exclude-close-to", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA")]
        public virtual void AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To_Variant4()
        {
#line 363
  this.AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "receiver", "", "6", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("account filter /transactions?address=<address>&address-role=<address-role>&exclud" +
            "e-close-to=<exclude-close-to>: Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address-role", "receiver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:exclude-close-to", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA")]
        public virtual void AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To_Variant5()
        {
#line 363
  this.AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "receiver", "true", "3", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("account filter /transactions?address=<address>&address-role=<address-role>&exclud" +
            "e-close-to=<exclude-close-to>: Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:address-role", "sender")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:exclude-close-to", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "UIMZOGVGZYQQIXIGZ3QJBL3TPP2P5T4GUMMFG5HCA7MFQSPYR6QA")]
        public virtual void AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To_Variant6()
        {
#line 363
  this.AccountFilterTransactionsAddressAddressAddress_RoleAddress_RoleExclude_Close_ToExclude_Close_To("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "sender", "", "7", "UIMZOGVGZYQQIXIGZ3QJBL3TPP2P5T4GUMMFG5HCA7MFQSPYR6QA", ((string[])(null)));
#line hidden
        }
        
        public virtual void AccountsAccount_IdTransactions(string indexer, string account_Id, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("account-id", account_Id);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/accounts/<account-id>/transactions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 381
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 382
    testRunner.When(string.Format("I use {0} to search for all \"{1}\" transactions", indexer, account_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 383
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/accounts/<account-id>/transactions: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account-id", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA")]
        public virtual void AccountsAccount_IdTransactions_Variant0()
        {
#line 381
  this.AccountsAccount_IdTransactions("1", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "13", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/accounts/<account-id>/transactions: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account-id", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA")]
        public virtual void AccountsAccount_IdTransactions_Variant1()
        {
#line 381
  this.AccountsAccount_IdTransactions("1", "ZBBRQD73JH5KZ7XRED6GALJYJUXOMBBP3X2Z2XFA4LATV3MUJKKMKG7SHA", "4", "3BMTOZIYGTS3XS33MXDZO6UMNUTJOLFC3527ONBCVAHY3IMEWSUA", ((string[])(null)));
#line hidden
        }
        
        public virtual void AssetsAsset_IdTransactions(string indexer, string asset_Id, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id", asset_Id);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/assets/<asset-id>/transactions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 395
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 396
    testRunner.When(string.Format("I use {0} to search for all {1} asset transactions", indexer, asset_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 397
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets/<asset-id>/transactions: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "KGG5ZGQQ57Y2ZDH5CFRYMJODPJ4TVIQBAPKT3HK3PIS6A6K4T5GQ")]
        public virtual void AssetsAsset_IdTransactions_1()
        {
#line 395
  this.AssetsAsset_IdTransactions("1", "9", "7", "KGG5ZGQQ57Y2ZDH5CFRYMJODPJ4TVIQBAPKT3HK3PIS6A6K4T5GQ", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsLimitLimitNextToken(string indexer, string limit, string max_Round, string num, string txid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("max-round", max_Round);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("txid", txid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?limit=<limit>&next=token", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 407
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 408
    testRunner.When(string.Format("I use {0} to search for transactions with {1}, \"\", \"\", \"\", \"\", 0, 0, {2}, 0, \"\", " +
                            "\"\", 0, 0, \"\", \"\", \"\" and token \"\"", indexer, limit, max_Round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 409
    testRunner.And(string.Format("I get the next page using {0} to search for transactions with {1} and {2}", indexer, limit, max_Round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 410
    testRunner.And(string.Format("I get the next page using {0} to search for transactions with {1} and {2}", indexer, limit, max_Round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 411
    testRunner.And(string.Format("I get the next page using {0} to search for transactions with {1} and {2}", indexer, limit, max_Round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 412
    testRunner.And(string.Format("I get the next page using {0} to search for transactions with {1} and {2}", indexer, limit, max_Round), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 413
    testRunner.Then(string.Format("there are {0} transactions in the response, the first is \"{1}\".", num, txid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?limit=<limit>&next=token: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:max-round", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "QW2BAFU3JR7YDKDHG6BDAFJZTY7V7XBMZKHUGX2CBUG3PKHGAVMA")]
        public virtual void TransactionsLimitLimitNextToken_Variant0()
        {
#line 407
  this.TransactionsLimitLimitNextToken("1", "1", "10", "1", "QW2BAFU3JR7YDKDHG6BDAFJZTY7V7XBMZKHUGX2CBUG3PKHGAVMA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?limit=<limit>&next=token: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:max-round", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:txid", "KHTHBNR3MVPNVLGMHPDO73N6FL43WBQHPMW2PFY2LQIAQJZF77FA")]
        public virtual void TransactionsLimitLimitNextToken_Variant1()
        {
#line 407
  this.TransactionsLimitLimitNextToken("1", "5", "10", "5", "KHTHBNR3MVPNVLGMHPDO73N6FL43WBQHPMW2PFY2LQIAQJZF77FA", ((string[])(null)));
#line hidden
        }
        
        public virtual void Assets(string indexer, string asset_Id_In, string creator, string name, string unit, string num, string asset_Id_Out, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("asset-id-in", asset_Id_In);
            argumentsOfScenario.Add("creator", creator);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("unit", unit);
            argumentsOfScenario.Add("num", num);
            argumentsOfScenario.Add("asset-id-out", asset_Id_Out);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/assets", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 424
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 425
    testRunner.When(string.Format("I use {0} to search for assets with 0, {1}, \"{2}\", \"{3}\", \"{4}\", and token \"\"", indexer, asset_Id_In, creator, name, unit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 426
    testRunner.Then(string.Format("there are {0} assets in the response, the first is {1}.", num, asset_Id_Out), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant0()
        {
#line 424
  this.Assets("1", "0", "", "", "", "1", "9", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "0")]
        public virtual void Assets_Variant1()
        {
#line 424
  this.Assets("1", "8", "", "", "", "0", "0", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant2()
        {
#line 424
  this.Assets("1", "9", "", "", "", "1", "9", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "bogocoin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant3()
        {
#line 424
  this.Assets("1", "0", "", "bogocoin", "", "1", "9", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "BoGoCoIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant4()
        {
#line 424
  this.Assets("1", "0", "", "BoGoCoIn", "", "1", "9", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "GoCo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant5()
        {
#line 424
  this.Assets("1", "0", "", "GoCo", "", "1", "9", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "bogo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant6()
        {
#line 424
  this.Assets("1", "0", "", "", "bogo", "1", "9", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "boGO")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant7()
        {
#line 424
  this.Assets("1", "0", "", "", "boGO", "1", "9", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "oG")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant8()
        {
#line 424
  this.Assets("1", "0", "", "", "oG", "1", "9", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant9()
        {
#line 424
  this.Assets("1", "0", "OSY2LBBSYJXOBAO6T5XGMGAJM77JVPQ7OLRR5J3HEPC3QWBTQZNWSEZA44", "", "", "1", "9", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/assets: Variant 10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-in", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:creator", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:name", "none")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unit", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:num", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:asset-id-out", "9")]
        public virtual void Assets_Variant10()
        {
#line 424
  this.Assets("1", "0", "", "none", "", "0", "9", ((string[])(null)));
#line hidden
        }
        
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken(string indexer, string application_Id, string limit, string token, string jsonfile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer.applications"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("application-id", application_Id);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("token", token);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/applications?id=<application-id>&limit=<limit>&next=<token>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 443
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 444
    testRunner.When(string.Format("I use {0} to search for applications with {1}, {2}, and token \"{3}\"", indexer, limit, application_Id, token), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 445
    testRunner.Then(string.Format("the parsed response should equal \"{0}\".", jsonfile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v2indexerclient_responsejsons/indexer_v2_app_search_22.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_Variant0()
        {
#line 443
  this.ApplicationsIdApplication_IdLimitLimitNextToken("2", "22", "0", "", "v2indexerclient_responsejsons/indexer_v2_app_search_22.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v2indexerclient_responsejsons/indexer_v2_app_search_70.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_Variant1()
        {
#line 443
  this.ApplicationsIdApplication_IdLimitLimitNextToken("2", "70", "0", "", "v2indexerclient_responsejsons/indexer_v2_app_search_70.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v2indexerclient_responsejsons/indexer_v2_app_search_limit_3.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_Variant2()
        {
#line 443
  this.ApplicationsIdApplication_IdLimitLimitNextToken("2", "0", "3", "", "v2indexerclient_responsejsons/indexer_v2_app_search_limit_3.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "25")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v2indexerclient_responsejsons/indexer_v2_app_search_next_25.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_Variant3()
        {
#line 443
  this.ApplicationsIdApplication_IdLimitLimitNextToken("2", "0", "1", "25", "v2indexerclient_responsejsons/indexer_v2_app_search_next_25.json", ((string[])(null)));
#line hidden
        }
        
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_2(string indexer, string application_Id, string limit, string include_All, string token, string jsonfile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer.231"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("application-id", application_Id);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("include-all", include_All);
            argumentsOfScenario.Add("token", token);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/applications?id=<application-id>&limit=<limit>&next=<token>-2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 455
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 456
    testRunner.When(string.Format("I use {0} to search for applications with {1}, {2}, \"{3}\" and token \"{4}\"", indexer, limit, application_Id, include_All, token), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 457
    testRunner.Then(string.Format("the parsed response should equal \"{0}\".", jsonfile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>-2: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_search_22.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_2_Variant0()
        {
#line 455
  this.ApplicationsIdApplication_IdLimitLimitNextToken_2("4", "22", "0", "false", "", "v23x_indexerclient_responsejsons/indexer_v2_app_search_22.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>-2: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_search_70.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_2_Variant1()
        {
#line 455
  this.ApplicationsIdApplication_IdLimitLimitNextToken_2("4", "70", "0", "false", "", "v23x_indexerclient_responsejsons/indexer_v2_app_search_70.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>-2: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_search_limit_3.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_2_Variant2()
        {
#line 455
  this.ApplicationsIdApplication_IdLimitLimitNextToken_2("4", "0", "3", "false", "", "v23x_indexerclient_responsejsons/indexer_v2_app_search_limit_3.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>-2: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "25")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_search_next_25.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_2_Variant3()
        {
#line 455
  this.ApplicationsIdApplication_IdLimitLimitNextToken_2("4", "0", "1", "false", "25", "v23x_indexerclient_responsejsons/indexer_v2_app_search_next_25.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>-2: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_search_22_all.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_2_Variant4()
        {
#line 455
  this.ApplicationsIdApplication_IdLimitLimitNextToken_2("4", "22", "0", "true", "", "v23x_indexerclient_responsejsons/indexer_v2_app_search_22_all.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>-2: Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_search_70_all.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_2_Variant5()
        {
#line 455
  this.ApplicationsIdApplication_IdLimitLimitNextToken_2("4", "70", "0", "true", "", "v23x_indexerclient_responsejsons/indexer_v2_app_search_70_all.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>-2: Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_search_limit_3_all.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_2_Variant6()
        {
#line 455
  this.ApplicationsIdApplication_IdLimitLimitNextToken_2("4", "0", "3", "true", "", "v23x_indexerclient_responsejsons/indexer_v2_app_search_limit_3_all.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications?id=<application-id>&limit=<limit>&next=<token>-2: Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:token", "25")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_search_next_25_all.json")]
        public virtual void ApplicationsIdApplication_IdLimitLimitNextToken_2_Variant7()
        {
#line 455
  this.ApplicationsIdApplication_IdLimitLimitNextToken_2("4", "0", "1", "true", "25", "v23x_indexerclient_responsejsons/indexer_v2_app_search_next_25_all.json", ((string[])(null)));
#line hidden
        }
        
        public virtual void ApplicationsApplication_Id(string indexer, string application_Id, string jsonfile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer.applications"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("application-id", application_Id);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/applications/<application-id>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 470
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 471
    testRunner.When(string.Format("I use {0} to lookup application with {1}", indexer, application_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 472
    testRunner.Then(string.Format("the parsed response should equal \"{0}\".", jsonfile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications/<application-id>: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v2indexerclient_responsejsons/indexer_v2_app_lookup_22.json")]
        public virtual void ApplicationsApplication_Id_Variant0()
        {
#line 470
  this.ApplicationsApplication_Id("2", "22", "v2indexerclient_responsejsons/indexer_v2_app_lookup_22.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications/<application-id>: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v2indexerclient_responsejsons/indexer_v2_app_lookup_70.json")]
        public virtual void ApplicationsApplication_Id_Variant1()
        {
#line 470
  this.ApplicationsApplication_Id("2", "70", "v2indexerclient_responsejsons/indexer_v2_app_lookup_70.json", ((string[])(null)));
#line hidden
        }
        
        public virtual void ApplicationsApplication_Id_2(string indexer, string application_Id, string include_All, string jsonfile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer.231"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("application-id", application_Id);
            argumentsOfScenario.Add("include-all", include_All);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/applications/<application-id>-2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 480
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 481
    testRunner.When(string.Format("I use {0} to lookup application with {1} and \"{2}\"", indexer, application_Id, include_All), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 482
    testRunner.Then(string.Format("the parsed response should equal \"{0}\".", jsonfile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications/<application-id>-2: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_lookup_22.json")]
        public virtual void ApplicationsApplication_Id_2_Variant0()
        {
#line 480
  this.ApplicationsApplication_Id_2("4", "22", "false", "v23x_indexerclient_responsejsons/indexer_v2_app_lookup_22.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications/<application-id>-2: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_lookup_70.json")]
        public virtual void ApplicationsApplication_Id_2_Variant1()
        {
#line 480
  this.ApplicationsApplication_Id_2("4", "70", "false", "v23x_indexerclient_responsejsons/indexer_v2_app_lookup_70.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications/<application-id>-2: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_lookup_22_all.json")]
        public virtual void ApplicationsApplication_Id_2_Variant2()
        {
#line 480
  this.ApplicationsApplication_Id_2("4", "22", "true", "v23x_indexerclient_responsejsons/indexer_v2_app_lookup_22_all.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/applications/<application-id>-2: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_app_lookup_70_all.json")]
        public virtual void ApplicationsApplication_Id_2_Variant3()
        {
#line 480
  this.ApplicationsApplication_Id_2("4", "70", "true", "v23x_indexerclient_responsejsons/indexer_v2_app_lookup_70_all.json", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransactionsEverything(string indexer, string limit, string application_Id, string jsonfile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer.applications"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("application-id", application_Id);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/transactions?everything", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 494
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 496
    testRunner.When(string.Format("I use {0} to search for transactions with {1}, \"\", \"\", \"\", \"\", 0, 0, 0, 0, \"\", \"\"" +
                            ", 0, 0, \"\", \"\", \"\", {2} and token \"\"", indexer, limit, application_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 497
    testRunner.Then(string.Format("the parsed response should equal \"{0}\".", jsonfile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?everything: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v2indexerclient_responsejsons/indexer_v2_tx_search_app_70.json")]
        public virtual void TransactionsEverything_Variant0()
        {
#line 494
  this.TransactionsEverything("2", "0", "70", "v2indexerclient_responsejsons/indexer_v2_tx_search_app_70.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?everything: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v2indexerclient_responsejsons/indexer_v2_tx_search_app_70_lim_3.json")]
        public virtual void TransactionsEverything_Variant1()
        {
#line 494
  this.TransactionsEverything("2", "3", "70", "v2indexerclient_responsejsons/indexer_v2_tx_search_app_70_lim_3.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?everything: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_tx_search_app_70.json")]
        public virtual void TransactionsEverything_Variant2()
        {
#line 494
  this.TransactionsEverything("4", "0", "70", "v23x_indexerclient_responsejsons/indexer_v2_tx_search_app_70.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/transactions?everything: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:limit", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_tx_search_app_70_lim_3.json")]
        public virtual void TransactionsEverything_Variant3()
        {
#line 494
  this.TransactionsEverything("4", "3", "70", "v23x_indexerclient_responsejsons/indexer_v2_tx_search_app_70_lim_3.json", ((string[])(null)));
#line hidden
        }
        
        public virtual void AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_LtAuth_AddrAuth_AddrApp_IdApplication_Id(string indexer, string application_Id, string jsonfile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer.applications"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("application-id", application_Id);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currency-lt>&aut" +
                    "h-addr=<auth-addr>&app-id=<application-id>", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 507
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 508
    testRunner.When(string.Format("I use {0} to search for an account with 0, 0, 0, 0, \"\", {1} and token \"\"", indexer, application_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 509
    testRunner.Then(string.Format("the parsed response should equal \"{0}\".", jsonfile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currency-lt>&aut" +
            "h-addr=<auth-addr>&app-id=<application-id>: 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.applications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v2indexerclient_responsejsons/indexer_v2_acct_search_app_70.json")]
        public virtual void AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_LtAuth_AddrAuth_AddrApp_IdApplication_Id_2()
        {
#line 507
  this.AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_LtAuth_AddrAuth_AddrApp_IdApplication_Id("2", "70", "v2indexerclient_responsejsons/indexer_v2_acct_search_app_70.json", ((string[])(null)));
#line hidden
        }
        
        public virtual void AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_LtAuth_AddrAuth_AddrApp_IdApplication_Id_2(string indexer, string application_Id, string include_All, string jsonfile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "indexer.231"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("indexer", indexer);
            argumentsOfScenario.Add("application-id", application_Id);
            argumentsOfScenario.Add("include-all", include_All);
            argumentsOfScenario.Add("jsonfile", jsonfile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("/accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currency-lt>&aut" +
                    "h-addr=<auth-addr>&app-id=<application-id>-2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 516
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 517
    testRunner.When(string.Format("I use {0} to search for an account with 0, 0, 0, 0, \"\", {1}, \"{2}\" and token \"\"", indexer, application_Id, include_All), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 518
    testRunner.Then(string.Format("the parsed response should equal \"{0}\".", jsonfile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currency-lt>&aut" +
            "h-addr=<auth-addr>&app-id=<application-id>-2: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_acct_search_app_70.json")]
        public virtual void AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_LtAuth_AddrAuth_AddrApp_IdApplication_Id_2_Variant0()
        {
#line 516
  this.AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_LtAuth_AddrAuth_AddrApp_IdApplication_Id_2("4", "70", "false", "v23x_indexerclient_responsejsons/indexer_v2_acct_search_app_70.json", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("/accounts?asset-id=<asset-id>&limit=<limit>&gt=<currency-gt>&lt=<currency-lt>&aut" +
            "h-addr=<auth-addr>&app-id=<application-id>-2: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Indexer Integration Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("indexer.231")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:indexer", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:application-id", "70")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:include-all", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:jsonfile", "v23x_indexerclient_responsejsons/indexer_v2_acct_search_app_70_all.json")]
        public virtual void AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_LtAuth_AddrAuth_AddrApp_IdApplication_Id_2_Variant1()
        {
#line 516
  this.AccountsAsset_IdAsset_IdLimitLimitGtCurrency_GtLtCurrency_LtAuth_AddrAuth_AddrApp_IdApplication_Id_2("4", "70", "true", "v23x_indexerclient_responsejsons/indexer_v2_acct_search_app_70_all.json", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
