/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Algorand.Client;
using Algorand.V2.Model;

namespace Algorand.V2.Algod
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get account information.
        /// </summary>
        /// <remarks>
        /// Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Account</returns>
        Algorand.V2.Model.Account AccountInformation (string address, string format = null);

        /// <summary>
        /// Get account information.
        /// </summary>
        /// <remarks>
        /// Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Algorand.V2.Model.Account> AccountInformationWithHttpInfo (string address, string format = null);
        /// <summary>
        /// Get application information.
        /// </summary>
        /// <remarks>
        /// Given a application id, it returns application information including creator, approval and clear programs, global and local schemas, and global state.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">An application identifier</param>
        /// <returns>Application</returns>
        Application GetApplicationByID (long? applicationId);

        /// <summary>
        /// Get application information.
        /// </summary>
        /// <remarks>
        /// Given a application id, it returns application information including creator, approval and clear programs, global and local schemas, and global state.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">An application identifier</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> GetApplicationByIDWithHttpInfo (long? applicationId);
        /// <summary>
        /// Get asset information.
        /// </summary>
        /// <remarks>
        /// Given a asset id, it returns asset information including creator, name, total supply and special addresses.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An asset identifier</param>
        /// <returns>Asset</returns>
        Asset GetAssetByID (long? assetId);

        /// <summary>
        /// Get asset information.
        /// </summary>
        /// <remarks>
        /// Given a asset id, it returns asset information including creator, name, total supply and special addresses.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An asset identifier</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> GetAssetByIDWithHttpInfo (long? assetId);
        /// <summary>
        /// Get the block for the given round.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>BlockResponse</returns>
        BlockResponse GetBlock (long? round, string format = null);

        /// <summary>
        /// Get the block for the given round.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of BlockResponse</returns>
        ApiResponse<BlockResponse> GetBlockWithHttpInfo (long? round, string format = null);
        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>PendingTransactionsResponse</returns>
        PendingTransactionsResponse GetPendingTransactions (long? max = null, string format = null);

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of PendingTransactionsResponse</returns>
        ApiResponse<PendingTransactionsResponse> GetPendingTransactionsWithHttpInfo (long? max = null, string format = null);
        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>PendingTransactionsResponse</returns>
        PendingTransactionsResponse GetPendingTransactionsByAddress (string address, long? max = null, string format = null);

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of PendingTransactionsResponse</returns>
        ApiResponse<PendingTransactionsResponse> GetPendingTransactionsByAddressWithHttpInfo (string address, long? max = null, string format = null);
        /// <summary>
        /// Gets the current node status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeStatusResponse</returns>
        NodeStatusResponse GetStatus ();

        /// <summary>
        /// Gets the current node status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeStatusResponse</returns>
        ApiResponse<NodeStatusResponse> GetStatusWithHttpInfo ();
        /// <summary>
        /// Get the current supply reported by the ledger.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SupplyResponse</returns>
        SupplyResponse GetSupply ();

        /// <summary>
        /// Get the current supply reported by the ledger.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SupplyResponse</returns>
        ApiResponse<SupplyResponse> GetSupplyWithHttpInfo ();
        /// <summary>
        /// Get a specific pending transaction.
        /// </summary>
        /// <remarks>
        /// Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>PendingTransactionResponse</returns>
        PendingTransactionResponse PendingTransactionInformation (string txid, string format = null);

        /// <summary>
        /// Get a specific pending transaction.
        /// </summary>
        /// <remarks>
        /// Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of PendingTransactionResponse</returns>
        ApiResponse<PendingTransactionResponse> PendingTransactionInformationWithHttpInfo (string txid, string format = null);
        /// <summary>
        /// Broadcasts a raw transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtxn">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>PostTransactionsResponse</returns>
        PostTransactionsResponse RawTransaction (byte[] rawtxn);

        /// <summary>
        /// Broadcasts a raw transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtxn">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>ApiResponse of PostTransactionsResponse</returns>
        ApiResponse<PostTransactionsResponse> RawTransactionWithHttpInfo (byte[] rawtxn);
        /// <summary>
        /// Compile TEAL source code to binary, produce its hash
        /// </summary>
        /// <remarks>
        /// Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">TEAL source code to be compiled</param>
        /// <returns>CompileResponse</returns>
        CompileResponse TealCompile (byte[] source);

        /// <summary>
        /// Compile TEAL source code to binary, produce its hash
        /// </summary>
        /// <remarks>
        /// Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">TEAL source code to be compiled</param>
        /// <returns>ApiResponse of CompileResponse</returns>
        ApiResponse<CompileResponse> TealCompileWithHttpInfo (byte[] source);
        /// <summary>
        /// Provide debugging information for a transaction (or group).
        /// </summary>
        /// <remarks>
        /// Executes TEAL program(s) in context and returns debugging information about the execution.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Transaction (or group) and any accompanying state-simulation data. (optional)</param>
        /// <returns>DryrunResponse</returns>
        DryrunResponse TealDryrun (DryrunRequest request = null);

        /// <summary>
        /// Provide debugging information for a transaction (or group).
        /// </summary>
        /// <remarks>
        /// Executes TEAL program(s) in context and returns debugging information about the execution.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Transaction (or group) and any accompanying state-simulation data. (optional)</param>
        /// <returns>ApiResponse of DryrunResponse</returns>
        ApiResponse<DryrunResponse> TealDryrunWithHttpInfo (DryrunRequest request = null);
        /// <summary>
        /// Get parameters for constructing a new transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionParametersResponse</returns>
        TransactionParametersResponse TransactionParams ();

        /// <summary>
        /// Get parameters for constructing a new transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionParametersResponse</returns>
        ApiResponse<TransactionParametersResponse> TransactionParamsWithHttpInfo ();
        /// <summary>
        /// Gets the node status after waiting for the given round.
        /// </summary>
        /// <remarks>
        /// Waits for a block to appear after round {round} and returns the node&#39;s status at the time.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>NodeStatusResponse</returns>
        NodeStatusResponse WaitForBlock (long? round);

        /// <summary>
        /// Gets the node status after waiting for the given round.
        /// </summary>
        /// <remarks>
        /// Waits for a block to appear after round {round} and returns the node&#39;s status at the time.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>ApiResponse of NodeStatusResponse</returns>
        ApiResponse<NodeStatusResponse> WaitForBlockWithHttpInfo (long? round);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get account information.
        /// </summary>
        /// <remarks>
        /// Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Algorand.V2.Model.Account> AccountInformationAsync (string address, string format = null);

        /// <summary>
        /// Get account information.
        /// </summary>
        /// <remarks>
        /// Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Algorand.V2.Model.Account>> AccountInformationAsyncWithHttpInfo (string address, string format = null);
        /// <summary>
        /// Get application information.
        /// </summary>
        /// <remarks>
        /// Given a application id, it returns application information including creator, approval and clear programs, global and local schemas, and global state.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">An application identifier</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> GetApplicationByIDAsync (long? applicationId);

        /// <summary>
        /// Get application information.
        /// </summary>
        /// <remarks>
        /// Given a application id, it returns application information including creator, approval and clear programs, global and local schemas, and global state.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">An application identifier</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationByIDAsyncWithHttpInfo (long? applicationId);
        /// <summary>
        /// Get asset information.
        /// </summary>
        /// <remarks>
        /// Given a asset id, it returns asset information including creator, name, total supply and special addresses.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An asset identifier</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> GetAssetByIDAsync (long? assetId);

        /// <summary>
        /// Get asset information.
        /// </summary>
        /// <remarks>
        /// Given a asset id, it returns asset information including creator, name, total supply and special addresses.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An asset identifier</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> GetAssetByIDAsyncWithHttpInfo (long? assetId);
        /// <summary>
        /// Get the block for the given round.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of BlockResponse</returns>
        System.Threading.Tasks.Task<BlockResponse> GetBlockAsync (long? round, string format = null);

        /// <summary>
        /// Get the block for the given round.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (BlockResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockResponse>> GetBlockAsyncWithHttpInfo (long? round, string format = null);
        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of PendingTransactionsResponse</returns>
        System.Threading.Tasks.Task<PendingTransactionsResponse> GetPendingTransactionsAsync (long? max = null, string format = null);

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTransactionsResponse>> GetPendingTransactionsAsyncWithHttpInfo (long? max = null, string format = null);
        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of PendingTransactionsResponse</returns>
        System.Threading.Tasks.Task<PendingTransactionsResponse> GetPendingTransactionsByAddressAsync (string address, long? max = null, string format = null);

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTransactionsResponse>> GetPendingTransactionsByAddressAsyncWithHttpInfo (string address, long? max = null, string format = null);
        /// <summary>
        /// Gets the current node status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NodeStatusResponse</returns>
        System.Threading.Tasks.Task<NodeStatusResponse> GetStatusAsync ();

        /// <summary>
        /// Gets the current node status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NodeStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeStatusResponse>> GetStatusAsyncWithHttpInfo ();
        /// <summary>
        /// Get the current supply reported by the ledger.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SupplyResponse</returns>
        System.Threading.Tasks.Task<SupplyResponse> GetSupplyAsync ();

        /// <summary>
        /// Get the current supply reported by the ledger.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SupplyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupplyResponse>> GetSupplyAsyncWithHttpInfo ();
        /// <summary>
        /// Get a specific pending transaction.
        /// </summary>
        /// <remarks>
        /// Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of PendingTransactionResponse</returns>
        System.Threading.Tasks.Task<PendingTransactionResponse> PendingTransactionInformationAsync (string txid, string format = null);

        /// <summary>
        /// Get a specific pending transaction.
        /// </summary>
        /// <remarks>
        /// Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTransactionResponse>> PendingTransactionInformationAsyncWithHttpInfo (string txid, string format = null);
        /// <summary>
        /// Broadcasts a raw transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtxn">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>Task of PostTransactionsResponse</returns>
        System.Threading.Tasks.Task<PostTransactionsResponse> RawTransactionAsync (byte[] rawtxn);

        /// <summary>
        /// Broadcasts a raw transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtxn">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>Task of ApiResponse (PostTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostTransactionsResponse>> RawTransactionAsyncWithHttpInfo (byte[] rawtxn);
        /// <summary>
        /// Compile TEAL source code to binary, produce its hash
        /// </summary>
        /// <remarks>
        /// Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">TEAL source code to be compiled</param>
        /// <returns>Task of CompileResponse</returns>
        System.Threading.Tasks.Task<CompileResponse> TealCompileAsync (byte[] source);

        /// <summary>
        /// Compile TEAL source code to binary, produce its hash
        /// </summary>
        /// <remarks>
        /// Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">TEAL source code to be compiled</param>
        /// <returns>Task of ApiResponse (CompileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompileResponse>> TealCompileAsyncWithHttpInfo (byte[] source);
        /// <summary>
        /// Provide debugging information for a transaction (or group).
        /// </summary>
        /// <remarks>
        /// Executes TEAL program(s) in context and returns debugging information about the execution.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Transaction (or group) and any accompanying state-simulation data. (optional)</param>
        /// <returns>Task of DryrunResponse</returns>
        System.Threading.Tasks.Task<DryrunResponse> TealDryrunAsync (DryrunRequest request = null);

        /// <summary>
        /// Provide debugging information for a transaction (or group).
        /// </summary>
        /// <remarks>
        /// Executes TEAL program(s) in context and returns debugging information about the execution.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Transaction (or group) and any accompanying state-simulation data. (optional)</param>
        /// <returns>Task of ApiResponse (DryrunResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DryrunResponse>> TealDryrunAsyncWithHttpInfo (DryrunRequest request = null);
        /// <summary>
        /// Get parameters for constructing a new transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionParametersResponse</returns>
        System.Threading.Tasks.Task<TransactionParametersResponse> TransactionParamsAsync ();

        /// <summary>
        /// Get parameters for constructing a new transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionParametersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionParametersResponse>> TransactionParamsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the node status after waiting for the given round.
        /// </summary>
        /// <remarks>
        /// Waits for a block to appear after round {round} and returns the node&#39;s status at the time.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>Task of NodeStatusResponse</returns>
        System.Threading.Tasks.Task<NodeStatusResponse> WaitForBlockAsync (long? round);

        /// <summary>
        /// Gets the node status after waiting for the given round.
        /// </summary>
        /// <remarks>
        /// Waits for a block to appear after round {round} and returns the node&#39;s status at the time.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>Task of ApiResponse (NodeStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeStatusResponse>> WaitForBlockAsyncWithHttpInfo (long? round);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Algorand.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Algorand.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Algorand.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Algorand.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Algorand.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Algorand.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get account information. Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Account</returns>
        public Algorand.V2.Model.Account AccountInformation (string address, string format = null)
        {
             ApiResponse<Algorand.V2.Model.Account> localVarResponse = AccountInformationWithHttpInfo(address, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account information. Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of Account</returns>
        public ApiResponse<Algorand.V2.Model.Account> AccountInformationWithHttpInfo (string address, string format = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->AccountInformation");

            var localVarPath = "/v2/accounts/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Algorand.V2.Model.Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Algorand.V2.Model.Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Algorand.V2.Model.Account)));
        }

        /// <summary>
        /// Get account information. Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Algorand.V2.Model.Account> AccountInformationAsync (string address, string format = null)
        {
             ApiResponse<Algorand.V2.Model.Account> localVarResponse = await AccountInformationAsyncWithHttpInfo(address, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account information. Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Algorand.V2.Model.Account>> AccountInformationAsyncWithHttpInfo (string address, string format = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->AccountInformation");

            var localVarPath = "/v2/accounts/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Algorand.V2.Model.Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Algorand.V2.Model.Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Algorand.V2.Model.Account)));
        }

        /// <summary>
        /// Get application information. Given a application id, it returns application information including creator, approval and clear programs, global and local schemas, and global state.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">An application identifier</param>
        /// <returns>Application</returns>
        public Application GetApplicationByID (long? applicationId)
        {
             ApiResponse<Application> localVarResponse = GetApplicationByIDWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application information. Given a application id, it returns application information including creator, approval and clear programs, global and local schemas, and global state.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">An application identifier</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse< Application > GetApplicationByIDWithHttpInfo (long? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->GetApplicationByID");

            var localVarPath = "/v2/applications/{application-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application-id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get application information. Given a application id, it returns application information including creator, approval and clear programs, global and local schemas, and global state.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">An application identifier</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> GetApplicationByIDAsync (long? applicationId)
        {
             ApiResponse<Application> localVarResponse = await GetApplicationByIDAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application information. Given a application id, it returns application information including creator, approval and clear programs, global and local schemas, and global state.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">An application identifier</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationByIDAsyncWithHttpInfo (long? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->GetApplicationByID");

            var localVarPath = "/v2/applications/{application-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application-id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get asset information. Given a asset id, it returns asset information including creator, name, total supply and special addresses.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An asset identifier</param>
        /// <returns>Asset</returns>
        public Asset GetAssetByID (long? assetId)
        {
             ApiResponse<Asset> localVarResponse = GetAssetByIDWithHttpInfo(assetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset information. Given a asset id, it returns asset information including creator, name, total supply and special addresses.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An asset identifier</param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse< Asset > GetAssetByIDWithHttpInfo (long? assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->GetAssetByID");

            var localVarPath = "/v2/assets/{asset-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset-id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        /// Get asset information. Given a asset id, it returns asset information including creator, name, total supply and special addresses.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An asset identifier</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> GetAssetByIDAsync (long? assetId)
        {
             ApiResponse<Asset> localVarResponse = await GetAssetByIDAsyncWithHttpInfo(assetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get asset information. Given a asset id, it returns asset information including creator, name, total supply and special addresses.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An asset identifier</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> GetAssetByIDAsyncWithHttpInfo (long? assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->GetAssetByID");

            var localVarPath = "/v2/assets/{asset-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset-id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        /// Get the block for the given round. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>BlockResponse</returns>
        public BlockResponse GetBlock (long? round, string format = null)
        {
             ApiResponse<BlockResponse> localVarResponse = GetBlockWithHttpInfo(round, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the block for the given round. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of BlockResponse</returns>
        public ApiResponse< BlockResponse > GetBlockWithHttpInfo (long? round, string format = null)
        {
            // verify the required parameter 'round' is set
            if (round == null)
                throw new ApiException(400, "Missing required parameter 'round' when calling DefaultApi->GetBlock");

            var localVarPath = "/v2/blocks/{round}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (round != null) localVarPathParams.Add("round", this.Configuration.ApiClient.ParameterToString(round)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockResponse)));
        }

        /// <summary>
        /// Get the block for the given round. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of BlockResponse</returns>
        public async System.Threading.Tasks.Task<BlockResponse> GetBlockAsync (long? round, string format = null)
        {
             ApiResponse<BlockResponse> localVarResponse = await GetBlockAsyncWithHttpInfo(round, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the block for the given round. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (BlockResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockResponse>> GetBlockAsyncWithHttpInfo (long? round, string format = null)
        {
            // verify the required parameter 'round' is set
            if (round == null)
                throw new ApiException(400, "Missing required parameter 'round' when calling DefaultApi->GetBlock");

            var localVarPath = "/v2/blocks/{round}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (round != null) localVarPathParams.Add("round", this.Configuration.ApiClient.ParameterToString(round)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockResponse)));
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool. Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>PendingTransactionsResponse</returns>
        public PendingTransactionsResponse GetPendingTransactions (long? max = null, string format = null)
        {
             ApiResponse<PendingTransactionsResponse> localVarResponse = GetPendingTransactionsWithHttpInfo(max, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool. Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of PendingTransactionsResponse</returns>
        public ApiResponse< PendingTransactionsResponse > GetPendingTransactionsWithHttpInfo (long? max = null, string format = null)
        {

            var localVarPath = "/v2/transactions/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactionsResponse)));
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool. Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of PendingTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<PendingTransactionsResponse> GetPendingTransactionsAsync (long? max = null, string format = null)
        {
             ApiResponse<PendingTransactionsResponse> localVarResponse = await GetPendingTransactionsAsyncWithHttpInfo(max, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool. Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingTransactionsResponse>> GetPendingTransactionsAsyncWithHttpInfo (long? max = null, string format = null)
        {

            var localVarPath = "/v2/transactions/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactionsResponse)));
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address. Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>PendingTransactionsResponse</returns>
        public PendingTransactionsResponse GetPendingTransactionsByAddress (string address, long? max = null, string format = null)
        {
             ApiResponse<PendingTransactionsResponse> localVarResponse = GetPendingTransactionsByAddressWithHttpInfo(address, max, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address. Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of PendingTransactionsResponse</returns>
        public ApiResponse< PendingTransactionsResponse > GetPendingTransactionsByAddressWithHttpInfo (string address, long? max = null, string format = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->GetPendingTransactionsByAddress");

            var localVarPath = "/v2/accounts/{address}/transactions/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingTransactionsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactionsResponse)));
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address. Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of PendingTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<PendingTransactionsResponse> GetPendingTransactionsByAddressAsync (string address, long? max = null, string format = null)
        {
             ApiResponse<PendingTransactionsResponse> localVarResponse = await GetPendingTransactionsByAddressAsyncWithHttpInfo(address, max, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address. Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingTransactionsResponse>> GetPendingTransactionsByAddressAsyncWithHttpInfo (string address, long? max = null, string format = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->GetPendingTransactionsByAddress");

            var localVarPath = "/v2/accounts/{address}/transactions/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingTransactionsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactionsResponse)));
        }

        /// <summary>
        /// Gets the current node status. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeStatusResponse</returns>
        public NodeStatusResponse GetStatus ()
        {
             ApiResponse<NodeStatusResponse> localVarResponse = GetStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current node status. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeStatusResponse</returns>
        public ApiResponse< NodeStatusResponse > GetStatusWithHttpInfo ()
        {

            var localVarPath = "/v2/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatusResponse)));
        }

        /// <summary>
        /// Gets the current node status. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NodeStatusResponse</returns>
        public async System.Threading.Tasks.Task<NodeStatusResponse> GetStatusAsync ()
        {
             ApiResponse<NodeStatusResponse> localVarResponse = await GetStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current node status. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NodeStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeStatusResponse>> GetStatusAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatusResponse)));
        }

        /// <summary>
        /// Get the current supply reported by the ledger. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PendingTransactionsResponse2</returns>
        public SupplyResponse GetSupply ()
        {
             ApiResponse<SupplyResponse> localVarResponse = GetSupplyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current supply reported by the ledger. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PendingTransactionsResponse2</returns>
        public ApiResponse< SupplyResponse > GetSupplyWithHttpInfo ()
        {

            var localVarPath = "/v2/ledger/supply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SupplyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SupplyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SupplyResponse)));
        }

        /// <summary>
        /// Get the current supply reported by the ledger. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PendingTransactionsResponse2</returns>
        public async System.Threading.Tasks.Task<SupplyResponse> GetSupplyAsync ()
        {
             ApiResponse<SupplyResponse> localVarResponse = await GetSupplyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current supply reported by the ledger. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PendingTransactionsResponse2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SupplyResponse>> GetSupplyAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/ledger/supply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SupplyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SupplyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SupplyResponse)));
        }

        /// <summary>
        /// Get a specific pending transaction. Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>PendingTransactionsResponse6</returns>
        public PendingTransactionResponse PendingTransactionInformation (string txid, string format = null)
        {
             ApiResponse<PendingTransactionResponse> localVarResponse = PendingTransactionInformationWithHttpInfo(txid, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific pending transaction. Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>ApiResponse of PendingTransactionsResponse6</returns>
        public ApiResponse< PendingTransactionResponse > PendingTransactionInformationWithHttpInfo (string txid, string format = null)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->PendingTransactionInformation");

            var localVarPath = "/v2/transactions/pending/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTransactionInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactionResponse)));
        }

        /// <summary>
        /// Get a specific pending transaction. Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of PendingTransactionsResponse6</returns>
        public async System.Threading.Tasks.Task<PendingTransactionResponse> PendingTransactionInformationAsync (string txid, string format = null)
        {
             ApiResponse<PendingTransactionResponse> localVarResponse = await PendingTransactionInformationAsyncWithHttpInfo(txid, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific pending transaction. Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <param name="format">Configures whether the response object is JSON or MessagePack encoded. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactionsResponse6)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingTransactionResponse>> PendingTransactionInformationAsyncWithHttpInfo (string txid, string format = null)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->PendingTransactionInformation");

            var localVarPath = "/v2/transactions/pending/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTransactionInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactionResponse)));
        }

        /// <summary>
        /// Broadcasts a raw transaction to the network. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtxn">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>PendingTransactionsResponse3</returns>
        public PostTransactionsResponse RawTransaction (byte[] rawtxn)
        {
             ApiResponse<PostTransactionsResponse> localVarResponse = RawTransactionWithHttpInfo(rawtxn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Broadcasts a raw transaction to the network. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtxn">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>ApiResponse of PendingTransactionsResponse3</returns>
        public ApiResponse< PostTransactionsResponse > RawTransactionWithHttpInfo (byte[] rawtxn)
        {
            // verify the required parameter 'rawtxn' is set
            if (rawtxn == null)
                throw new ApiException(400, "Missing required parameter 'rawtxn' when calling DefaultApi->RawTransaction");

            var localVarPath = "/v2/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-binary"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rawtxn != null && rawtxn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rawtxn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rawtxn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostTransactionsResponse)));
        }

        /// <summary>
        /// Broadcasts a raw transaction to the network. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtxn">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>Task of PendingTransactionsResponse3</returns>
        public async System.Threading.Tasks.Task<PostTransactionsResponse> RawTransactionAsync (byte[] rawtxn)
        {
             ApiResponse<PostTransactionsResponse> localVarResponse = await RawTransactionAsyncWithHttpInfo(rawtxn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Broadcasts a raw transaction to the network. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtxn">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>Task of ApiResponse (PendingTransactionsResponse3)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostTransactionsResponse>> RawTransactionAsyncWithHttpInfo (byte[] rawtxn)
        {
            // verify the required parameter 'rawtxn' is set
            if (rawtxn == null)
                throw new ApiException(400, "Missing required parameter 'rawtxn' when calling DefaultApi->RawTransaction");

            var localVarPath = "/v2/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-binary"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rawtxn != null && rawtxn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rawtxn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rawtxn; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostTransactionsResponse)));
        }

        /// <summary>
        /// Compile TEAL source code to binary, produce its hash Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">TEAL source code to be compiled</param>
        /// <returns>PendingTransactionsResponse7</returns>
        public CompileResponse TealCompile (byte[] source)
        {
             ApiResponse<CompileResponse> localVarResponse = TealCompileWithHttpInfo(source);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Compile TEAL source code to binary, produce its hash Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">TEAL source code to be compiled</param>
        /// <returns>ApiResponse of PendingTransactionsResponse7</returns>
        public ApiResponse< CompileResponse > TealCompileWithHttpInfo (byte[] source)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling DefaultApi->TealCompile");

            var localVarPath = "/v2/teal/compile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null && source.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(source); // http body (model) parameter
            }
            else
            {
                localVarPostBody = source; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TealCompile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompileResponse)));
        }

        /// <summary>
        /// Compile TEAL source code to binary, produce its hash Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">TEAL source code to be compiled</param>
        /// <returns>Task of PendingTransactionsResponse7</returns>
        public async System.Threading.Tasks.Task<CompileResponse> TealCompileAsync (byte[] source)
        {
             ApiResponse<CompileResponse> localVarResponse = await TealCompileAsyncWithHttpInfo(source);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Compile TEAL source code to binary, produce its hash Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">TEAL source code to be compiled</param>
        /// <returns>Task of ApiResponse (PendingTransactionsResponse7)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompileResponse>> TealCompileAsyncWithHttpInfo (byte[] source)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling DefaultApi->TealCompile");

            var localVarPath = "/v2/teal/compile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null && source.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(source); // http body (model) parameter
            }
            else
            {
                localVarPostBody = source; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TealCompile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompileResponse)));
        }

        /// <summary>
        /// Provide debugging information for a transaction (or group). Executes TEAL program(s) in context and returns debugging information about the execution.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Transaction (or group) and any accompanying state-simulation data. (optional)</param>
        /// <returns>DryrunResponse</returns>
        public DryrunResponse TealDryrun (DryrunRequest request = null)
        {
             ApiResponse<DryrunResponse> localVarResponse = TealDryrunWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provide debugging information for a transaction (or group). Executes TEAL program(s) in context and returns debugging information about the execution.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Transaction (or group) and any accompanying state-simulation data. (optional)</param>
        /// <returns>ApiResponse of DryrunResponse</returns>
        public ApiResponse< DryrunResponse > TealDryrunWithHttpInfo (DryrunRequest request = null)
        {

            var localVarPath = "/v2/teal/dryrun";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/msgpack"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                //localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
                localVarPostBody = Encoder.EncodeToMsgPack(request);
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TealDryrun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DryrunResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DryrunResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DryrunResponse)));
        }

        /// <summary>
        /// Provide debugging information for a transaction (or group). Executes TEAL program(s) in context and returns debugging information about the execution.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Transaction (or group) and any accompanying state-simulation data. (optional)</param>
        /// <returns>Task of DryrunResponse</returns>
        public async System.Threading.Tasks.Task<DryrunResponse> TealDryrunAsync (DryrunRequest request = null)
        {
             ApiResponse<DryrunResponse> localVarResponse = await TealDryrunAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provide debugging information for a transaction (or group). Executes TEAL program(s) in context and returns debugging information about the execution.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Transaction (or group) and any accompanying state-simulation data. (optional)</param>
        /// <returns>Task of ApiResponse (DryrunResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DryrunResponse>> TealDryrunAsyncWithHttpInfo (DryrunRequest request = null)
        {

            var localVarPath = "/v2/teal/dryrun";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/msgpack"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TealDryrun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DryrunResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DryrunResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DryrunResponse)));
        }

        /// <summary>
        /// Get parameters for constructing a new transaction 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionParametersResponse</returns>
        public TransactionParametersResponse TransactionParams ()
        {
             ApiResponse<TransactionParametersResponse> localVarResponse = TransactionParamsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get parameters for constructing a new transaction 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionParametersResponse</returns>
        public ApiResponse< TransactionParametersResponse > TransactionParamsWithHttpInfo ()
        {

            var localVarPath = "/v2/transactions/params";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionParametersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionParametersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionParametersResponse)));
        }

        /// <summary>
        /// Get parameters for constructing a new transaction 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionParametersResponse</returns>
        public async System.Threading.Tasks.Task<TransactionParametersResponse> TransactionParamsAsync ()
        {
             ApiResponse<TransactionParametersResponse> localVarResponse = await TransactionParamsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get parameters for constructing a new transaction 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionParametersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionParametersResponse>> TransactionParamsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/transactions/params";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionParametersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionParametersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionParametersResponse)));
        }

        /// <summary>
        /// Gets the node status after waiting for the given round. Waits for a block to appear after round {round} and returns the node&#39;s status at the time.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>NodeStatusResponse</returns>
        public NodeStatusResponse WaitForBlock (long? round)
        {
             ApiResponse<NodeStatusResponse> localVarResponse = WaitForBlockWithHttpInfo(round);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the node status after waiting for the given round. Waits for a block to appear after round {round} and returns the node&#39;s status at the time.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>ApiResponse of NodeStatusResponse</returns>
        public ApiResponse< NodeStatusResponse > WaitForBlockWithHttpInfo (long? round)
        {
            // verify the required parameter 'round' is set
            if (round == null)
                throw new ApiException(400, "Missing required parameter 'round' when calling DefaultApi->WaitForBlock");

            var localVarPath = "/v2/status/wait-for-block-after/{round}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (round != null) localVarPathParams.Add("round", this.Configuration.ApiClient.ParameterToString(round)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WaitForBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatusResponse)));
        }

        /// <summary>
        /// Gets the node status after waiting for the given round. Waits for a block to appear after round {round} and returns the node&#39;s status at the time.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>Task of NodeStatusResponse</returns>
        public async System.Threading.Tasks.Task<NodeStatusResponse> WaitForBlockAsync (long? round)
        {
             ApiResponse<NodeStatusResponse> localVarResponse = await WaitForBlockAsyncWithHttpInfo(round);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the node status after waiting for the given round. Waits for a block to appear after round {round} and returns the node&#39;s status at the time.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>Task of ApiResponse (NodeStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeStatusResponse>> WaitForBlockAsyncWithHttpInfo (long? round)
        {
            // verify the required parameter 'round' is set
            if (round == null)
                throw new ApiException(400, "Missing required parameter 'round' when calling DefaultApi->WaitForBlock");

            var localVarPath = "/v2/status/wait-for-block-after/{round}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (round != null) localVarPathParams.Add("round", this.Configuration.ApiClient.ParameterToString(round)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WaitForBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatusResponse)));
        }

    }
}
