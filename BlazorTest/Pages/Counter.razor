@page "/counter"
@using Algorand.Algod.Model;
@using Algorand;
@using Algorand.Algod;
@using Algorand.Algod.Model.Transactions;
@using Algorand.Crypto;
@using Algorand.Utils;
@using Algorand.Utils.Crypto;
@using BlazorSodium.Services;
@using BlazorSodium.Sodium;
@using System.Text;

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;


    [Inject]
    IBlazorSodiumService BlazorSodiumService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await BlazorSodiumService.InitializeAsync();
        Sodium.PrintSodium();
    }

    private async Task IncrementCount()
    {
        Sha512256.Compute(Encoding.UTF8.GetBytes("test"), out byte[] digest);
        currentCount++;

        var ALGOD_API_ADDR = "http://localhost:4001/";
        var ALGOD_API_TOKEN = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";

        // This boilerplate creates an Account object with a private key represented by a mnemnonic.
        //
        //   If using Sandbox, please use the following commands to replace the below mnemonic:
        //   ./sandbox goal account list
        //   ./sandbox goal account export -a <address>
        
        string mnemonic="legend discover buffalo execute forest spend cable focus any birth width flee beef soul atom weather stock update derive remind outdoor melody web abandon barely";
        var srandom = new FixedSecureRandom(Mnemonic.ToKey(mnemonic));
        var KeyPair = new KeyPair(srandom);
        var Address = new Address(KeyPair.ClearTextPublicKey);
        var src = new Account("legend discover buffalo execute forest spend cable focus any birth width flee beef soul atom weather stock update derive remind outdoor melody web abandon barely");




        var DEST_ADDR = "5KFWCRTIJUMDBXELQGMRBGD2OQ2L3ZQ2MB54KT2XOQ3UWPKUU4Y7TQ4X7U";


        var httpClient = HttpClientConfigurator.ConfigureHttpClient(ALGOD_API_ADDR, ALGOD_API_TOKEN);
        DefaultApi algodApiInstance = new DefaultApi(httpClient);

        var supply = await algodApiInstance.GetSupplyAsync();


        var accountInfo = await algodApiInstance.AccountInformationAsync(src.Address.ToString(), null, null);



        var transParams = await algodApiInstance.TransactionParamsAsync();

        var amount = Utils.AlgosToMicroalgos(1);
        var tx = PaymentTransaction.GetPaymentTransactionFromNetworkTransactionParameters(src.Address, new Address(DEST_ADDR), amount, "pay message", transParams);
        var signedTx = tx.Sign(src);


        try
        {
            // send the transaction to the network
            var id = await Utils.SubmitTransaction(algodApiInstance, signedTx);
            var resp = await Utils.WaitTransactionToComplete(algodApiInstance, id.Txid);
        }
        catch (Exception ex)
        {
            
        }


      


    }
}
